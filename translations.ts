export const translations = {
  en: {
    // App.tsx
    realitySimAI: 'RealitySim AI',
    agents: 'Agents',
    deceased: 'Deceased',
    entities: 'Entities',
    environment: 'Environment',
    availableActions: 'Available Actions',
    agentCard_selectAgent: 'Select an agent to view details.',
    confirmDelete: 'Are you sure you want to delete this {type}? This action cannot be undone.',
    type_agent: 'agent',
    type_entity: 'entity',
    type_action: 'action',
    // Logs in App.tsx
    log_simulationInitialized: 'Simulation initialized.',
    log_simulationStepped: 'Simulation stepped forward.',
    log_simulationRanSteps: 'Simulation ran for {steps} steps.',
    log_simulationReset: 'Simulation reset to initial state.',
    log_agentProcessingPrompt: 'Agent {agentId} processing prompt: "{prompt}" {aiInfo}',
    log_aiSuggestedAction: 'AI suggested action: "{action}"',
    log_aiFailed: 'AI could not find a suitable action. No action taken.',
    log_aiError: 'Error with AI API: {error}',
    error_lmStudio_cors: 'Failed to connect to LM Studio. This is usually a Cross-Origin Resource Sharing (CORS) issue. Please check the following in your LM Studio application: 1. Go to the "Local Server" tab. 2. Ensure the server is "Running". 3. **Crucially, find the "CORS" option and make sure it is checked/enabled.** 4. Verify the URL in this app\'s settings matches the one shown in LM Studio.',
    error_lmStudio_url_invalid: "Invalid LM Studio URL format. Please provide a valid base URL like 'http://localhost:1234'.",
    log_createdAgent: 'Created new agent: {name}',
    log_createdEntity: 'Created new entity: {name}',
    log_createdAction: 'Created new action: {name}',
    log_removed: 'Removed {type}: {name}',
    log_adminSetHealth: "Admin set {name}'s health to {health}.",
    log_adminSetPosition: "Admin set {name}'s position to ({x}, {y}).",
    log_adminInflictedSickness: "Admin inflicted {name} with {sickness}.",
    log_adminCured: 'Admin cured {name}.',
    log_adminResurrected: 'Admin resurrected {name}.',
    log_adminModifiedEnv: 'Admin directly modified the environment.',
    log_exported: 'Exported partial {type} data.',
    log_stateSaved: 'Simulation state saved to file.',
    log_stateLoaded: 'Simulation state successfully loaded from file.',
    log_loadError: 'Failed to load state from file: {error}',
    log_runningSimulation: 'Running simulation for {steps} steps...',
    log_generatingWorld: 'Generating world...',
    log_worldGenerated: 'New world processed successfully.',
    log_worldGenerated_warning: '‚ö†Ô∏è AI generated {genAgents}/{reqAgents} agents and {genEntities}/{reqEntities} entities. Continuing with generated results.',
    log_configure_ai_full: 'AI endpoint or model not configured. Please open settings to provide both.',
    // Settings
    settings_title: 'Settings',
    settings_lmStudioUrl_label: 'LM Studio API Endpoint',
    settings_lmStudioUrl_description: 'Enter the base URL from your local LM Studio server (e.g., http://localhost:1234). The API path will be added automatically.',
    settings_lmStudioModel_label: 'Model Name',
    settings_lmStudioModel_description: 'Enter the model\'s API identifier from LM Studio (e.g., google/gemma-2b-it), not the filename.',
    settings_save: 'Save',
    settings_cancel: 'Cancel',
    // Generate World Modal
    generateWorldModal_title: 'Generate New World',
    generateWorldModal_agentsLabel: 'Number of Agents',
    generateWorldModal_agentsDescription: 'How many agents should populate the new world?',
    generateWorldModal_entitiesLabel: 'Number of Entities',
    generateWorldModal_entitiesDescription: 'How many entities (objects, animals) should be in the new world?',
    generateWorldModal_generate: 'Generate',
    // AgentCard.tsx
    agentCard_status: 'Status',
    agentCard_age: 'Age',
    agentCard_offspring: 'Offspring',
    agentCard_culture: 'Culture',
    agentCard_religion: 'Religion',
    agentCard_role: 'Role',
    agentCard_lifeStage: 'Life Stage',
    agentCard_location: 'Location',
    agentCard_health: 'Health',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Thirst',
    agentCard_fatigue: 'Fatigue',
    agentCard_sickness: 'Sickness',
    agentCard_healthy: 'Healthy',
    agentCard_deceased: 'DECEASED',
    agentCard_beliefs: 'Beliefs',
    agentCard_emotions: 'Situational Emotions',
    agentCard_resonance: 'Action Resonance',
    agentCard_lastActions: 'Last Actions',
    agentCard_socialMemory: 'Social Memory',
    agentCard_noSocialMemory: 'No significant social events recorded.',
    agentCard_interact: 'Interact',
    agentCard_promptPlaceholder: 'Prompt for {name} (AI will interpret)...',
    agentCard_promptPlaceholderRaw: 'Enter exact action name...',
    agentCard_promptPlaceholderDeceased: '{name} cannot respond.',
    agentCard_noActions: 'No actions recorded.',
    agentCard_useAi: 'Use Local AI',
    agentCard_noBeliefs: 'No beliefs',
    agentCard_noEmotions: 'No emotions',
    agentCard_noResonance: 'No resonance',
    agentCard_genome: 'Genome',
    agentCard_noGenome: 'No genetic markers.',
    agentCard_relationships: 'Relationships',
    agentCard_noRelationships: 'No relationships established.',
    agentCard_dispositions: 'Learned Dispositions',
    agentCard_noDispositions: 'No learned dispositions towards others.',
    agentCard_inventory: 'Inventory',
    agentCard_noInventory: 'Inventory is empty.',
    // Resource Types
    resource_food: 'Food',
    resource_water: 'Water',
    resource_wood: 'Wood',
    resource_medicine: 'Medicine',
    // Relationship Types
    relationship_stranger: 'Stranger',
    relationship_acquaintance: 'Acquaintance',
    relationship_friend: 'Friend',
    relationship_rival: 'Rival',
    relationship_partner: 'Partner',
    relationship_spouse: 'Spouse',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages
    lifeStage_child: 'Child',
    lifeStage_adolescent: 'Adolescent',
    lifeStage_adult: 'Adult',
    lifeStage_elder: 'Elder',
    // Roles
    role_worker: 'Worker',
    role_healer: 'Healer',
    role_scientist: 'Scientist',
    role_leader: 'Leader',
    role_none: 'None',
    // Cultures & Religions
    culture_none: 'None',
    religion_none: 'None',
    // ControlPanel.tsx
    controlPanel_step: 'Step',
    controlPanel_run: 'Run',
    controlPanel_reset: 'Reset',
    controlPanel_generateWorld: 'Generate World',
    // CreateObjectPanel.tsx
    create_createNew: 'Create New',
    create_agent: 'Agent',
    create_entity: 'Entity',
    create_action: 'Action',
    create_name: 'Name',
    create_description: 'Description',
    create_beliefsPlaceholder: 'Beliefs (JSON format e.g. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief Key (optional)',
    create_genome_placeholder: 'Genes (e.g. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Generate random genes',
    create_create: 'Create',
    create_invalidJson: 'Invalid JSON for beliefs. Please use {"key": value} format.',
    create_role_label: 'Role:',
    // LogPanel.tsx
    logPanel_eventLog: 'Event Log',
    // WorldGraph.tsx
    worldGraph_title: 'World Map',
    // ExporterPanel.tsx
    stateManagement_title: 'Save & Load State',
    stateManagement_save: 'Save Full State',
    stateManagement_load: 'Load Full State',
    stateManagement_advanced: 'Advanced Export Options',
    export_env: 'Export Environment Only',
    export_agents: 'Export Agents Only',
    export_entities: 'Export Entities Only',
    // AdminPanel.tsx
    admin_title: 'Admin Control Panel',
    admin_envOverride: 'Environment Override',
    admin_updateEnv: 'Update Environment',
    admin_ruleEditor: 'World Rule Editor',
    admin_createAction: 'Create New Action',
    admin_createActionBtn: 'Create Action',
    admin_existingActions: 'Existing Actions',
    admin_agentManagement: 'Agent Management',
    admin_resurrect: 'Resurrect',
    admin_set: 'Set',
    admin_sicknessPlaceholder: 'None',
    // Action Logs (from simulation.ts)
    log_action_sayHelloWorld: '{agentName} says: Hello World!',
    log_action_changeWeatherToSunny: '{agentName} changes the weather to sunny.',
    log_action_changeWeatherToRainy: '{agentName} changes the weather to rainy.',
    log_action_notAuthorized: '{agentName} is not authorized for this action.',
    log_action_rest: 'üí§ {agentName} rests and recovers. Fatigue is reduced.',
    log_action_rest_cured: 'üí§ {agentName} rests and recovers from {sickness}.',
    log_action_eat: 'üçé {agentName} eats some food, reducing their hunger.',
    log_action_eat_no_food: '{agentName} wants to eat, but has no food in their inventory.',
    log_action_drink: 'üíß {agentName} drinks from {sourceName}, quenching their thirst.',
    log_action_drink_no_source: '{agentName} is thirsty, but cannot find a water source nearby.',
    log_action_gather_food: 'üß∫ {agentName} gathers {amount} food from {sourceName}.',
    log_action_gather_food_depleted: 'üß∫ {agentName} gathers the last {amount} food from the depleted {sourceName}.',
    log_action_gather_food_no_source: '{agentName} looks for food, but finds no sources nearby.',
    log_action_gather_wood: 'ü™µ {agentName} gathers {amount} wood from {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} looks for wood, but finds no sources nearby.',
    log_action_build_shelter: 'üè° {agentName} uses 10 wood to build a small shelter.',
    log_action_build_shelter_no_wood: '{agentName} wants to build a shelter but needs {woodCost} wood.',
    log_action_move_towards_resource: '{agentName} moves towards {resourceName}.',
    log_action_move: '{agentName} moves {direction} to ({x}, {y}).',
    log_action_custom: 'Custom action "{actionName}" executed by {agentName}.',
    log_action_marry: 'üíç {agentName1} and {agentName2} are now married!',
    log_action_propose_rejected: 'üíî {target} rejected {proposer}\'s marriage proposal.',
    log_action_fight: 'üí• {agentName1} and {agentName2} got into a fight!',
    log_action_reproduce_success: 'üë∂ A child is born to {parent1} and {parent2}!',
    log_action_reproduce_fail: '{parent1} and {parent2} tried to have a child, but were unsuccessful.',
    log_action_reproduce_no_partner: '{agentName} looks for a partner to start a family with, but finds no one suitable nearby.',
    log_action_reproduce_fail_partner_age: '{agentName} wants to start a family, but {partnerName} is not of reproductive age.',
    log_action_promote_culture: 'üó£Ô∏è {agentName} passionately promotes the beliefs of the {cultureId} culture.',
    log_action_move_towards_love: 'üíò {agentName} moves towards {targetName}, feeling hopeful.',
    log_action_move_towards_fight: 'üò° {agentName} moves towards {targetName}, looking for a fight.',
    log_action_wander_sadly: 'üòî {agentName} wanders around sadly.',
    log_action_wander_thoughtfully: 'ü§î {agentName} wanders around thoughtfully.',
    log_disease_caughtSickness: 'ü§í {agentName} has caught {sickness}.',
    log_disease_lostHealth: '{agentName} loses health due to {sickness}.',
    log_disease_succumbed: 'üíÄ {agentName} has succumbed to their illness.',
    log_aging_healthDecline: '{agentName} (age {age}) loses health due to old age.',
    log_aging_succumbed: 'üíÄ {agentName} has succumbed to old age.',
    log_survival_starving: '‚ÄºÔ∏è {agentName} is starving and losing health!',
    log_survival_dehydrated: '‚ÄºÔ∏è {agentName} is dehydrated and losing health!',
    log_survival_succumbed_needs: 'üíÄ {agentName} has succumbed to hunger or thirst.',
    log_interaction_start: 'A conversation starts between {agentName1} and {agentName2}.',
    log_interaction_dialogue: '{speakerName}: "{dialogue}"',
    log_execution_deceased: '{agentName} cannot execute actions as they are deceased.',
    log_execution_deceasedPrompt: '{agentName} cannot perform actions as they are deceased.',
    log_execution_actionNotFound: '{agentName} could not find a matching action for prompt: "{prompt}"',
    log_execution_agentNotFound: 'Agent {agentId} not found.',
    log_action_fail_age: '{agentName} is too young to {actionName} (needs to be {requiredAge}).',
    log_action_fail_age_reproduce: '{agentName} cannot reproduce (must be between {minAge} and {maxAge}).',
    log_action_fail_role: '{agentName} cannot perform this action, requires role: {requiredRole}.',
    log_action_fail_role_or_religion: '{agentName} cannot perform this action, requires role {requiredRole} and a religion.',
    log_action_pray: 'üôè {agentName} prays to their deity, finding inner peace.',
    log_action_pray_no_religion: '{agentName} wants to pray, but has no religion.',
    log_action_heal: '‚ù§Ô∏è‚Äçü©π Healer {healerName} cured {targetName} of {sickness}!',
    log_action_heal_no_target: 'Healer {agentName} looked for someone to heal, but found no one sick nearby.',
    log_action_missionize: '‚õ™ {agentName} tries to convince {targetName} of the virtues of {religionId}.',
    log_action_missionize_no_target: '{agentName} looks for non-believers to missionize, but finds none.',
    log_action_convert_success: '‚ú® {converter} successfully converted {target} to {religionId}!',
    log_action_convert_fail: '{converter} tried to convert {target}, but was rejected.',
    log_action_excommunicate: '‚öñÔ∏è Leader {leader} has excommunicated {target} from {religionId}!',
    log_action_excommunicate_no_target: 'Leader {agentName} looked for someone to excommunicate, but found no one.',
    // Chart labels
    belief_weather_sunny: 'Weather: Sunny',
    belief_weather_rainy: 'Weather: Rainy',
    belief_progress_good: 'Progress is Good',
    belief_nature_good: 'Nature is Good',
    belief_admin_access: 'Admin Access',
    emotion_happiness: 'Happiness',
    emotion_sadness: 'Sadness',
    emotion_anger: 'Anger',
    emotion_love: 'Love',
    emotion_trust: 'Trust',
    emotion_fear: 'Fear',
  },
  de: {
    // App.tsx
    realitySimAI: 'RealitySim KI',
    agents: 'Agenten',
    deceased: 'Verstorben',
    entities: 'Entit√§ten',
    environment: 'Umgebung',
    availableActions: 'Verf√ºgbare Aktionen',
    agentCard_selectAgent: 'W√§hle einen Agenten aus, um Details anzuzeigen.',
    confirmDelete: 'Sind Sie sicher, dass Sie diese(n) {type} l√∂schen m√∂chten? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.',
    type_agent: 'Agent',
    type_entity: 'Entit√§t',
    type_action: 'Aktion',
    // Logs in App.tsx
    log_simulationInitialized: 'Simulation initialisiert.',
    log_simulationStepped: 'Simulationsschritt ausgef√ºhrt.',
    log_simulationRanSteps: 'Simulation f√ºr {steps} Schritte ausgef√ºhrt.',
    log_simulationReset: 'Simulation auf Anfangszustand zur√ºckgesetzt.',
    log_agentProcessingPrompt: 'Agent {agentId} verarbeitet Prompt: "{prompt}" {aiInfo}',
    log_aiSuggestedAction: 'KI schlug Aktion vor: "{action}"',
    log_aiFailed: 'KI konnte keine passende Aktion finden. Keine Aktion ausgef√ºhrt.',
    log_aiError: 'Fehler bei der KI API: {error}',
    error_lmStudio_cors: 'Verbindung zu LM Studio fehlgeschlagen. Dies ist normalerweise ein Problem mit Cross-Origin Resource Sharing (CORS). Bitte √ºberpr√ºfen Sie Folgendes in Ihrer LM Studio-Anwendung: 1. Gehen Sie zum Tab "Local Server". 2. Stellen Sie sicher, dass der Server l√§uft ("Running"). 3. **Ganz wichtig: Suchen Sie die "CORS"-Option und stellen Sie sicher, dass sie aktiviert ist.** 4. Vergewissern Sie sich, dass die URL in den Einstellungen dieser App mit der in LM Studio angezeigten √ºbereinstimmt.',
    error_lmStudio_url_invalid: "Ung√ºltiges LM Studio URL-Format. Bitte geben Sie eine g√ºltige Basis-URL an, z. B. 'http://localhost:1234'.",
    log_createdAgent: 'Neuer Agent erstellt: {name}',
    log_createdEntity: 'Neue Entit√§t erstellt: {name}',
    log_createdAction: 'Neue Aktion erstellt: {name}',
    log_removed: '{type} entfernt: {name}',
    log_adminSetHealth: "Admin hat die Gesundheit von {name} auf {health} gesetzt.",
    log_adminSetPosition: "Admin hat die Position von {name} auf ({x}, {y}) gesetzt.",
    log_adminInflictedSickness: "Admin hat {name} mit {sickness} infiziert.",
    log_adminCured: 'Admin hat {name} geheilt.',
    log_adminResurrected: 'Admin hat {name} wiederbelebt.',
    log_adminModifiedEnv: 'Admin hat die Umgebung direkt modifiziert.',
    log_exported: 'Partielle {type}-Daten exportiert.',
    log_stateSaved: 'Simulationsstatus in Datei gespeichert.',
    log_stateLoaded: 'Simulationsstatus erfolgreich aus Datei geladen.',
    log_loadError: 'Fehler beim Laden des Zustands aus der Datei: {error}',
    log_runningSimulation: 'Simulation wird f√ºr {steps} Schritte ausgef√ºhrt...',
    log_generatingWorld: 'Generiere Welt...',
    log_worldGenerated: 'Neue Welt erfolgreich verarbeitet.',
    log_worldGenerated_warning: '‚ö†Ô∏è KI hat {genAgents}/{reqAgents} Agenten und {genEntities}/{reqEntities} Entit√§ten generiert. Fahre mit dem generierten Ergebnis fort.',
    log_configure_ai_full: 'KI-Endpunkt oder Modell nicht konfiguriert. Bitte beides in den Einstellungen angeben.',
    // Settings
    settings_title: 'Einstellungen',
    settings_lmStudioUrl_label: 'LM Studio API Endpunkt',
    settings_lmStudioUrl_description: 'Geben Sie die Basis-URL Ihres lokalen LM Studio-Servers ein (z.B. http://localhost:1234). Der API-Pfad wird automatisch hinzugef√ºgt.',
    settings_lmStudioModel_label: 'Modellname',
    settings_lmStudioModel_description: 'Geben Sie den API-Identifier des Modells aus LM Studio an (z.B. google/gemma-2b-it), nicht den Dateinamen.',
    settings_save: 'Speichern',
    settings_cancel: 'Abbrechen',
    // Generate World Modal
    generateWorldModal_title: 'Neue Welt generieren',
    generateWorldModal_agentsLabel: 'Anzahl der Agenten',
    generateWorldModal_agentsDescription: 'Wie viele Agenten sollen die neue Welt bev√∂lkern?',
    generateWorldModal_entitiesLabel: 'Anzahl der Entit√§ten',
    generateWorldModal_entitiesDescription: 'Wie viele Entit√§ten (Objekte, Tiere) soll es in der neuen Welt geben?',
    generateWorldModal_generate: 'Generieren',
    // AgentCard.tsx
    agentCard_status: 'Status',
    agentCard_age: 'Alter',
    agentCard_offspring: 'Nachkommen',
    agentCard_culture: 'Kultur',
    agentCard_religion: 'Religion',
    agentCard_role: 'Rolle',
    agentCard_lifeStage: 'Lebensphase',
    agentCard_location: 'Standort',
    agentCard_health: 'Gesundheit',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Durst',
    agentCard_fatigue: 'M√ºdigkeit',
    agentCard_sickness: 'Krankheit',
    agentCard_healthy: 'Gesund',
    agentCard_deceased: 'VERSTORBEN',
    agentCard_beliefs: '√úberzeugungen',
    agentCard_emotions: 'Situative Emotionen',
    agentCard_resonance: 'Aktionsresonanz',
    agentCard_lastActions: 'Letzte Aktionen',
    agentCard_socialMemory: 'Soziales Ged√§chtnis',
    agentCard_noSocialMemory: 'Keine nennenswerten sozialen Ereignisse aufgezeichnet.',
    agentCard_interact: 'Interagieren',
    agentCard_promptPlaceholder: 'Prompt f√ºr {name} (KI interpretiert)...',
    agentCard_promptPlaceholderRaw: 'Exakten Aktionsnamen eingeben...',
    agentCard_promptPlaceholderDeceased: '{name} kann nicht antworten.',
    agentCard_noActions: 'Keine Aktionen aufgezeichnet.',
    agentCard_useAi: 'Lokale KI verwenden',
    agentCard_noBeliefs: 'Keine √úberzeugungen',
    agentCard_noEmotions: 'Keine Emotionen',
    agentCard_noResonance: 'Keine Resonanz',
    agentCard_genome: 'Genom',
    agentCard_noGenome: 'Keine genetischen Marker.',
    agentCard_relationships: 'Beziehungen',
    agentCard_noRelationships: 'Keine Beziehungen etabliert.',
    agentCard_dispositions: 'Erlernte Dispositionen',
    agentCard_noDispositions: 'Keine erlernten Dispositionen gegen√ºber anderen.',
    agentCard_inventory: 'Inventar',
    agentCard_noInventory: 'Inventar ist leer.',
    // Resource Types
    resource_food: 'Nahrung',
    resource_water: 'Wasser',
    resource_wood: 'Holz',
    resource_medicine: 'Medizin',
    // Relationship Types
    relationship_stranger: 'Fremder',
    relationship_acquaintance: 'Bekannter',
    relationship_friend: 'Freund',
    relationship_rival: 'Rivale',
    relationship_partner: 'Partner',
    relationship_spouse: 'Ehepartner',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages
    lifeStage_child: 'Kind',
    lifeStage_adolescent: 'Jugendlicher',
    lifeStage_adult: 'Erwachsener',
    lifeStage_elder: '√Ñltester',
    // Roles
    role_worker: 'Arbeiter',
    role_healer: 'Heiler',
    role_scientist: 'Wissenschaftler',
    role_leader: 'Anf√ºhrer',
    role_none: 'Keine',
    // Cultures & Religions
    culture_none: 'Keine',
    religion_none: 'Keine',
    // ControlPanel.tsx
    controlPanel_step: 'Schritt',
    controlPanel_run: 'Start',
    controlPanel_reset: 'Zur√ºcksetzen',
    controlPanel_generateWorld: 'Welt generieren',
    // CreateObjectPanel.tsx
    create_createNew: 'Neu erstellen',
    create_agent: 'Agent',
    create_entity: 'Entit√§t',
    create_action: 'Aktion',
    create_name: 'Name',
    create_description: 'Beschreibung',
    create_beliefsPlaceholder: '√úberzeugungen (JSON-Format z.B. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief-Schl√ºssel (optional)',
    create_genome_placeholder: 'Gene (z.B. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Zuf√§llige Gene generieren',
    create_create: 'Erstellen',
    create_invalidJson: 'Ung√ºltiges JSON f√ºr √úberzeugungen. Bitte Format {"key": value} verwenden.',
    create_role_label: 'Rolle:',
    // LogPanel.tsx
    logPanel_eventLog: 'Ereignisprotokoll',
    // WorldGraph.tsx
    worldGraph_title: 'Weltkarte',
    // ExporterPanel.tsx
    stateManagement_title: 'Status Speichern & Laden',
    stateManagement_save: 'Vollst√§ndigen Status speichern',
    stateManagement_load: 'Vollst√§ndigen Status laden',
    stateManagement_advanced: 'Erweiterte Export-Optionen',
    export_env: 'Nur Umgebung exportieren',
    export_agents: 'Nur Agenten exportieren',
    export_entities: 'Nur Entit√§ten exportieren',
    // AdminPanel.tsx
    admin_title: 'Admin-Kontrollzentrum',
    admin_envOverride: 'Umgebung √ºberschreiben',
    admin_updateEnv: 'Umgebung aktualisieren',
    admin_ruleEditor: 'Weltregel-Editor',
    admin_createAction: 'Neue Aktion erstellen',
    admin_createActionBtn: 'Aktion erstellen',
    admin_existingActions: 'Bestehende Aktionen',
    admin_agentManagement: 'Agenten-Verwaltung',
    admin_resurrect: 'Wiederbeleben',
    admin_set: 'Setzen',
    admin_sicknessPlaceholder: 'Keine',
    // Action Logs (from simulation.ts)
    log_action_sayHelloWorld: '{agentName} sagt: Hallo Welt!',
    log_action_changeWeatherToSunny: '{agentName} √§ndert das Wetter zu sonnig.',
    log_action_changeWeatherToRainy: '{agentName} √§ndert das Wetter zu regnerisch.',
    log_action_notAuthorized: '{agentName} ist f√ºr diese Aktion nicht autorisiert.',
    log_action_rest: 'üí§ {agentName} ruht sich aus und erholt sich. M√ºdigkeit wird reduziert.',
    log_action_rest_cured: 'üí§ {agentName} ruht sich aus und erholt sich von {sickness}.',
    log_action_eat: 'üçé {agentName} isst etwas und reduziert seinen Hunger.',
    log_action_eat_no_food: '{agentName} m√∂chte essen, hat aber nichts im Inventar.',
    log_action_drink: 'üíß {agentName} trinkt aus {sourceName} und l√∂scht seinen Durst.',
    log_action_drink_no_source: '{agentName} ist durstig, aber findet keine Wasserquelle in der N√§he.',
    log_action_gather_food: 'üß∫ {agentName} sammelt {amount} Nahrung von {sourceName}.',
    log_action_gather_food_depleted: 'üß∫ {agentName} sammelt die letzte {amount} Nahrung von der ersch√∂pften Quelle {sourceName}.',
    log_action_gather_food_no_source: '{agentName} sucht nach Nahrung, findet aber keine Quellen in der N√§he.',
    log_action_gather_wood: 'ü™µ {agentName} sammelt {amount} Holz von {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} sucht nach Holz, findet aber keine Quellen in der N√§he.',
    log_action_build_shelter: 'üè° {agentName} benutzt 10 Holz, um einen kleinen Unterschlupf zu bauen.',
    log_action_build_shelter_no_wood: '{agentName} m√∂chte einen Unterschlupf bauen, ben√∂tigt aber {woodCost} Holz.',
    log_action_move_towards_resource: '{agentName} bewegt sich in Richtung {resourceName}.',
    log_action_move: '{agentName} bewegt sich nach {direction} zu ({x}, {y}).',
    log_action_custom: 'Benutzerdefinierte Aktion "{actionName}" von {agentName} ausgef√ºhrt.',
    log_action_marry: 'üíç {agentName1} und {agentName2} sind jetzt verheiratet!',
    log_action_propose_rejected: 'üíî {target} hat den Heiratsantrag von {proposer} abgelehnt.',
    log_action_fight: 'üí• {agentName1} und {agentName2} hatten einen Streit!',
    log_action_reproduce_success: 'üë∂ Ein Kind wurde f√ºr {parent1} und {parent2} geboren!',
    log_action_reproduce_fail: '{parent1} und {parent2} versuchten ein Kind zu bekommen, aber es war erfolglos.',
    log_action_reproduce_no_partner: '{agentName} sucht nach einem Partner, um eine Familie zu gr√ºnden, findet aber niemanden in der N√§he.',
    log_action_reproduce_fail_partner_age: '{agentName} m√∂chte eine Familie gr√ºnden, aber {partnerName} ist nicht im fortpflanzungsf√§higen Alter.',
    log_action_promote_culture: 'üó£Ô∏è {agentName} f√∂rdert leidenschaftlich die √úberzeugungen der {cultureId}-Kultur.',
    log_action_move_towards_love: 'üíò {agentName} bewegt sich auf {targetName} zu, voller Hoffnung.',
    log_action_move_towards_fight: 'üò° {agentName} bewegt sich auf {targetName} zu und sucht Streit.',
    log_action_wander_sadly: 'üòî {agentName} wandert traurig umher.',
    log_action_wander_thoughtfully: 'ü§î {agentName} wandert nachdenklich umher.',
    log_disease_caughtSickness: 'ü§í {agentName} hat sich {sickness} eingefangen.',
    log_disease_lostHealth: '{agentName} verliert Gesundheit durch {sickness}.',
    log_disease_succumbed: 'üíÄ {agentName} ist seiner Krankheit erlegen.',
    log_aging_healthDecline: '{agentName} (Alter {age}) verliert Gesundheit aufgrund von Altersschw√§che.',
    log_aging_succumbed: 'üíÄ {agentName} ist an Altersschw√§che gestorben.',
    log_survival_starving: '‚ÄºÔ∏è {agentName} verhungert und verliert Gesundheit!',
    log_survival_dehydrated: '‚ÄºÔ∏è {agentName} ist dehydriert und verliert Gesundheit!',
    log_survival_succumbed_needs: 'üíÄ {agentName} ist an Hunger oder Durst gestorben.',
    log_interaction_start: 'Ein Gespr√§ch zwischen {agentName1} und {agentName2} beginnt.',
    log_interaction_dialogue: '{speakerName}: "{dialogue}"',
    log_execution_deceased: '{agentName} kann keine Aktionen ausf√ºhren, da er verstorben ist.',
    log_execution_deceasedPrompt: '{agentName} kann keine Aktionen durchf√ºhren, da er verstorben ist.',
    log_execution_actionNotFound: '{agentName} konnte keine passende Aktion f√ºr den Prompt finden: "{prompt}"',
    log_execution_agentNotFound: 'Agent {agentId} nicht gefunden.',
    log_action_fail_age: '{agentName} ist zu jung, um {actionName} (muss {requiredAge} sein).',
    log_action_fail_age_reproduce: '{agentName} kann sich nicht fortpflanzen (muss zwischen {minAge} und {maxAge} sein).',
    log_action_fail_role: '{agentName} kann diese Aktion nicht ausf√ºhren, ben√∂tigt Rolle: {requiredRole}.',
    log_action_fail_role_or_religion: '{agentName} kann diese Aktion nicht ausf√ºhren, ben√∂tigt Rolle {requiredRole} und eine Religion.',
    log_action_pray: 'üôè {agentName} betet zu seiner Gottheit und findet inneren Frieden.',
    log_action_pray_no_religion: '{agentName} m√∂chte beten, hat aber keine Religion.',
    log_action_heal: '‚ù§Ô∏è‚Äçü©π Heiler {healerName} hat {targetName} von {sickness} geheilt!',
    log_action_heal_no_target: 'Heiler {agentName} suchte jemanden zum Heilen, fand aber niemanden in der N√§he.',
    log_action_missionize: '‚õ™ {agentName} versucht {targetName} von den Tugenden von {religionId} zu √ºberzeugen.',
    log_action_missionize_no_target: '{agentName} sucht nach Ungl√§ubigen zum Missionieren, findet aber keine.',
    log_action_convert_success: '‚ú® {converter} hat {target} erfolgreich zu {religionId} konvertiert!',
    log_action_convert_fail: '{converter} versuchte {target} zu konvertieren, wurde aber abgewiesen.',
    log_action_excommunicate: '‚öñÔ∏è Anf√ºhrer {leader} hat {target} aus {religionId} exkommuniziert!',
    log_action_excommunicate_no_target: 'Anf√ºhrer {agentName} suchte jemanden zum Exkommunizieren, fand aber niemanden.',
    // Chart labels
    belief_weather_sunny: 'Wetter: Sonnig',
    belief_weather_rainy: 'Wetter: Regnerisch',
    belief_progress_good: 'Fortschritt ist Gut',
    belief_nature_good: 'Natur ist Gut',
    belief_admin_access: 'Admin-Zugriff',
    emotion_happiness: 'Freude',
    emotion_sadness: 'Traurigkeit',
    emotion_anger: 'Wut',
    emotion_love: 'Liebe',
    emotion_trust: 'Vertrauen',
    emotion_fear: 'Angst',
  }
};

export type TranslationKey = keyof typeof translations.en;