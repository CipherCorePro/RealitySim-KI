export const translations = {
  en: {
    // App.tsx
    realitySimAI: 'RealitySim AI',
    agents: 'Agents',
    deceased: 'Deceased',
    entities: 'Entities',
    environment: 'Environment',
    availableActions: 'Available Actions',
    agentCard_selectAgent: 'Select an agent to view details.',
    confirmDelete: 'Are you sure you want to delete this {type}? This action cannot be undone.',
    type_agent: 'agent',
    type_entity: 'entity',
    type_action: 'action',
    // Logs
    log_simulationInitialized: 'Simulation initialized.',
    log_simulationStepped: 'Simulation stepped forward.',
    log_simulationRanSteps: 'Simulation ran for {steps} steps.',
    log_simulationReset: 'Simulation reset to initial state.',
    log_agentProcessingPrompt: 'Agent {agentId} processing prompt: "{prompt}" (using {aiInfo})',
    log_aiSuggestedAction: 'AI suggested action: "{action}"',
    log_aiFailed: 'AI could not find a suitable action. No action taken.',
    log_aiError: 'Error with AI API: {error}',
    error_lmStudio_cors: 'Failed to connect to LM Studio. This is usually a Cross-Origin Resource Sharing (CORS) issue. Please check the following in your LM Studio application: 1. Go to the "Local Server" tab. 2. Ensure the server is "Running". 3. **Crucially, find the "CORS" option and make sure it is checked/enabled.** 4. Verify the URL in this app\'s settings matches the one shown in LM Studio.',
    error_lmStudio_url_invalid: "Invalid LM Studio URL format. Please provide a valid base URL like 'http://localhost:1234'.",
    error_gemini_no_key: 'Google Gemini API key not found in environment variables. Please ensure it is set.',
    log_createdAgent: 'Created new agent: {name}',
    log_createdEntity: 'Created new entity: {name}',
    log_createdAction: 'Created new action: {name}',
    log_removed: 'Removed {type}: {name}',
    log_adminSetHealth: "Admin set {name}'s health to {health}.",
    log_adminSetPosition: "Admin set {name}'s position to ({x}, {y}).",
    log_adminInflictedSickness: "Admin inflicted {name} with {sickness}.",
    log_adminCured: 'Admin cured {name}.',
    log_adminResurrected: 'Admin resurrected {name}.',
    log_adminModifiedEnv: 'Admin directly modified the environment.',
    log_exported: 'Exported partial {type} data.',
    log_stateSaved: 'Simulation state saved to file.',
    log_stateLoaded: 'Simulation state successfully loaded from file.',
    log_loadError: 'Failed to load state from file: {error}',
    log_runningSimulation: 'Running simulation for {steps} steps...',
    log_generating: 'Generating...',
    log_generatingWorld: 'Generating world...',
    log_worldGenerated: 'New world processed successfully.',
    log_worldGenerated_warning: '⚠️ AI generated {genAgents}/{reqAgents} agents and {genEntities}/{reqEntities} entities. Continuing with generated results.',
    log_generatingAgents: 'Generating {count} new agents...',
    log_generatingEntities: 'Generating {count} new entities...',
    log_addedAgents: 'Added {count} new agents to the world.',
    log_addedEntities: 'Added {count} new entities to the world.',
    log_configure_ai_full: 'AI provider not configured. Please open settings to select and configure an AI provider.',
    log_adminSetCurrency: "Admin set {name}'s currency to {currency}$.",
    log_adminRepealedLaw: "Admin repealed the law: {lawName}.",
    log_adminSetLeader: "Admin has appointed {name} as the new leader.",
    log_adminUnlockedTech: "Admin unlocked technology \"{techId}\" for {cultureName}.",
    // Settings
    settings_title: 'Settings',
    settings_aiProvider_label: 'AI Provider',
    settings_lmStudioUrl_label: 'LM Studio API Endpoint',
    settings_lmStudioUrl_description: 'Enter the base URL from your local LM Studio server (e.g., http://localhost:1234). The API path will be added automatically.',
    settings_lmStudioModel_label: 'Model Name',
    settings_lmStudioModel_description: 'Enter the model\'s API identifier from LM Studio (e.g., google/gemma-2b-it), not the filename.',
    settings_geminiModel_label: 'Gemini Model',
    settings_geminiModel_description: 'Select the Google Gemini model to use.',
    settings_geminiApiKey_label: 'Gemini API Key',
    settings_geminiApiKey_value: 'Loaded from environment variable',
    settings_geminiApiKey_description: 'Your Google AI API key must be available as an environment variable named API_KEY.',
    settings_save: 'Save',
    settings_cancel: 'Cancel',
    // Generate World Modal
    generateWorldModal_title: 'Generate New World',
    generateWorldModal_agentsLabel: 'Number of Agents',
    generateWorldModal_agentsDescription: 'How many agents should populate the new world?',
    generateWorldModal_entitiesLabel: 'Number of Entities',
    generateWorldModal_entitiesDescription: 'How many entities (objects, animals) should be in the new world?',
    generateWorldModal_generate: 'Generate',
    // Generate Content Modal
    generateContent_title: 'Generate Content with AI',
    generateContent_addAgents: 'Add New Agents',
    generateContent_addEntities: 'Add New Entities',
    generateContent_agentsLabel: 'Number of new agents',
    generateContent_agentsDescription: 'How many new agents to generate and add to the world?',
    generateContent_entitiesLabel: 'Number of new entities',
    generateContent_entitiesDescription: 'How many new entities/resources to generate and add to the world?',
    generateContent_generateAgentsBtn: 'Generate Agents',
    generateContent_generateEntitiesBtn: 'Generate Entities',
    // AgentCard.tsx
    agentCard_statusAndNeeds: 'Status & Needs',
    agentCard_age: 'Age',
    agentCard_culture: 'Culture',
    agentCard_religion: 'Religion',
    agentCard_role: 'Role',
    agentCard_lifeStage: 'Life Stage',
    agentCard_health: 'Health',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Thirst',
    agentCard_fatigue: 'Fatigue',
    agentCard_sickness: 'Sickness',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Social Status',
    agentCard_currency: 'Currency',
    agentCard_healthy: 'Healthy',
    agentCard_deceased: 'DECEASED',
    agentCard_imprisoned: 'IMPRISONED',
    agentCard_release_at: 'Release at step:',
    agentCard_beliefs: 'Beliefs',
    agentCard_emotions: 'Situational Emotions',
    agentCard_interact: 'Interact',
    agentCard_promptPlaceholder: 'Prompt for {name} (AI will interpret)...',
    agentCard_promptPlaceholderRaw: 'Enter exact action name...',
    agentCard_promptPlaceholderDeceased: '{name} cannot respond.',
    agentCard_useAi: 'Use AI',
    agentCard_noBeliefs: 'No beliefs',
    agentCard_noEmotions: 'No emotions',
    agentCard_relationships: 'Relationships',
    agentCard_noRelationships: 'No relationships established.',
    agentCard_inventory: 'Inventory',
    agentCard_noInventory: 'Inventory is empty.',
    agentCard_personality: 'Personality',
    agentCard_skills: 'Skills',
    agentCard_goals: 'Active Goals',
    agentCard_noGoals: 'No active goals.',
    agentCard_trauma: 'Trauma',
    agentCard_noTrauma: 'No traumas recorded.',
    agentCard_tech: 'Known Technologies',
    agentCard_noTech: 'No technologies known.',
    agentCard_noData: 'No data.',
    agentCard_genome: 'Genome & Traits',
    agentCard_noGenome: 'No notable genetic traits.',
    // Genes
    'gene_G-RESISTANT': 'Resistant',
    'gene_G-AGILE': 'Agile',
    'gene_G-SOCIAL': 'Social',
    'gene_G-LONGEVITY': 'Longevity',
    'gene_G-FASTHEAL': 'Fast Heal',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_G-FERTILE': 'Fertile',
    'gene_desc_G-RESISTANT': 'Reduces health loss from sickness and increases recovery chance.',
    'gene_desc_G-AGILE': 'Moves faster (2 steps instead of 1).',
    'gene_desc_G-SOCIAL': 'More likely to initiate conversations.',
    'gene_desc_G-LONGEVITY': 'Reduces health loss from old age.',
    'gene_desc_G-FASTHEAL': 'Recovers more health when resting.',
    'gene_desc_G-INTELLIGENT': 'Gains skills and research points more quickly.',
    'gene_desc_G-FERTILE': 'Increased chance of successful reproduction.',
    // Resource & Item Types
    resource_food: 'Food',
    resource_water: 'Water',
    resource_wood: 'Wood',
    resource_medicine: 'Medicine',
    resource_iron: 'Iron',
    item_sword: 'Sword',
    item_plow: 'Plow',
    item_advanced_medicine: 'Advanced Medicine',
    item_iron_ingot: 'Iron Ingot',
    // Relationship Types
    relationship_stranger: 'Stranger',
    relationship_acquaintance: 'Acquaintance',
    relationship_friend: 'Friend',
    relationship_rival: 'Rival',
    relationship_partner: 'Partner',
    relationship_spouse: 'Spouse',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages & Roles
    lifeStage_child: 'Child',
    lifeStage_adolescent: 'Adolescent',
    lifeStage_adult: 'Adult',
    lifeStage_elder: 'Elder',
    role_worker: 'Worker',
    role_healer: 'Healer',
    role_scientist: 'Scientist',
    role_leader: 'Leader',
    role_trader: 'Trader',
    role_crafter: 'Crafter',
    role_guard: 'Guard',
    role_none: 'None',
    // Cultures & Religions
    culture_none: 'None',
    religion_none: 'None',
    // ControlPanel.tsx
    controlPanel_step: 'Step',
    controlPanel_run: 'Run',
    controlPanel_reset: 'Reset',
    controlPanel_generateWorld: 'Generate World',
    controlPanel_addWithAI: 'Add with AI',
    // CreateObjectPanel.tsx
    create_createNew: 'Create New',
    create_agent: 'Agent',
    create_entity: 'Entity',
    create_action: 'Action',
    create_name: 'Name',
    create_description: 'Description',
    create_beliefsPlaceholder: 'Beliefs (JSON format e.g. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief Key (optional)',
    create_genome_placeholder: 'Genes (e.g. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Generate random genes',
    create_create: 'Create',
    create_invalidJson: 'Invalid JSON for beliefs. Please use {"key": value} format.',
    create_role_label: 'Role:',
    create_randomize_personality: 'Randomize Personality',
    // LogPanel.tsx
    logPanel_eventLog: 'Event Log',
    // WorldGraph.tsx
    worldGraph_title: 'World Map',
    // ExporterPanel.tsx
    stateManagement_title: 'Save & Load State',
    stateManagement_save: 'Save Full State',
    stateManagement_load: 'Load Full State',
    stateManagement_advanced: 'Advanced Export Options',
    export_env: 'Export Environment Only',
    export_agents: 'Export Agents Only',
    export_entities: 'Export Entities Only',
    // AdminPanel.tsx
    admin_title: 'Admin Control Panel',
    admin_politicalManagement: 'Political Management',
    admin_currentLeader: 'Current Leader',
    admin_startElection: 'Start Election',
    admin_laws: 'Laws',
    admin_addLaw: 'Add Law',
    admin_lawName: 'Law Name',
    admin_violatingAction: 'Violating Action Name',
    admin_techManagement: 'Technology Management',
    admin_researchPoints: 'Research Points',
    admin_envOverride: 'Environment Override',
    admin_updateEnv: 'Update Environment',
    admin_ruleEditor: 'World Rule Editor',
    admin_createAction: 'Create New Action',
    admin_createActionBtn: 'Create Action',
    admin_existingActions: 'Existing Actions',
    admin_agentManagement: 'Agent Management',
    admin_resurrect: 'Resurrect',
    admin_set: 'Set',
    admin_sicknessPlaceholder: 'None',
    // Action Logs
    log_action_eat: '🍎 {agentName} eats some food, reducing their hunger.',
    log_action_eat_no_food: '{agentName} wants to eat, but has no food in their inventory.',
    log_action_drink: '💧 {agentName} drinks from {sourceName}, quenching their thirst.',
    log_action_drink_no_source: '{agentName} is thirsty, but cannot find a water source nearby.',
    log_action_gather_food: '🧺 {agentName} gathers {amount} food from {sourceName}.',
    log_action_gather_food_no_source: '{agentName} looks for food, but finds no sources nearby.',
    log_action_gather_wood: '🪵 {agentName} gathers {amount} wood from {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} looks for wood, but finds no sources nearby.',
    log_action_build_shelter: '🏡 {agentName} uses 10 wood to build a small shelter.',
    log_action_build_shelter_no_wood: '{agentName} wants to build a shelter but needs {woodCost} wood.',
    log_action_move_towards_resource: '{agentName} moves towards {resourceName}.',
    log_action_move_towards_agent: '{agentName} moves towards {targetName}.',
    log_action_move: '{agentName} moves {direction} to ({x}, {y}).',
    log_action_custom: 'Custom action "{actionName}" executed by {agentName}.',
    log_action_fight: '💥 {agentName1} and {agentName2} got into a fight!',
    log_action_steal_success: '✋ {stealer} stole 1 {item} from {victim}!',
    log_action_steal_fail: ' botched a theft attempt on {victim} and was caught!',
    log_action_steal_no_target: '{agentName} looked for someone to steal from, but found no suitable targets.',
    log_action_rest: '💤 {agentName} rests and recovers health to {newHealth}.',
    log_action_rest_and_cured: '💤 {agentName} rests, recovers, and feels their {sickness} subsiding!',
    log_action_talk: '💬 {speakerName} says to {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wanted to talk, but no one was nearby.',
    log_action_talk_failed: '{agentName} tried to start a conversation, but got lost in thought.',
    log_survival_starving: '‼️ {agentName} is starving and losing health!',
    log_survival_dehydrated: '‼️ {agentName} is dehydrated and losing health!',
    log_survival_sickness: '🤢 {agentName} is suffering from {sickness} and loses health.',
    log_survival_succumbed_needs: '💀 {agentName} has succumbed to hunger or thirst.',
    log_execution_deceased: '{agentName} cannot execute actions as they are deceased.',
    log_execution_actionNotFound: '{agentName} could not find a matching action for prompt: "{prompt}"',
    log_execution_imprisoned: '{agentName} cannot perform actions while imprisoned.',
    log_action_fail_role: '{agentName} cannot perform this action, requires role: {requiredRole}.',
    log_action_work_for_money: '💰 {agentName} works for a day, earning {amount}$.',
    log_action_mine_iron: '⛏️ {agentName} mines {amount} iron from {sourceName}.',
    log_action_mine_iron_no_source: '{agentName} looks for iron, but finds no sources nearby.',
    log_action_craft_success: '🛠️ {agentName} successfully crafted a {itemName}.',
    log_action_craft_fail_ingredients: '{agentName} tried to craft a {itemName} but lacked ingredients.',
    log_action_craft_fail_skill: '{agentName} lacks the skill ({skill} {level}) to craft.',
    log_action_craft_fail_tech: '{agentName} lacks the technology ({tech}) to craft.',
    log_action_market_list_item: '📈 {agentName} listed 1 {item} on the market for a system price of {price}$.',
    log_action_market_buy_item: '🛒 {agentName} bought 1 {item} from {sellerName} for {price}$.',
    log_action_market_too_far: '{agentName} is too far from the marketplace to trade.',
    log_action_market_no_items: '{agentName} went to the market but has nothing to sell.',
    log_action_market_is_empty: '{agentName} visited the market, but it was empty.',
    log_action_market_cannot_afford: '{agentName} could not afford any items at the market.',
    log_law_violation: '⚖️ {agentName} violated the "{lawName}" law and was fined {punishment}$.',
    log_law_violation_arrest: '⚖️ Guard {guardName} witnessed {criminalName} breaking the law and arrested them!',
    log_action_arrest_success: '⛓️ {guardName} arrested {criminalName} and sent them to jail.',
    log_action_release_from_jail: '{agentName} has served their time and is released from jail.',
    log_action_patrol: '🛡️ Guard {agentName} is patrolling the area.',
    log_election_started: '🗳️ An election for a new leader has begun!',
    log_election_winner: '🏆 {winnerName} has won the election with {votes} votes and is the new leader!',
    log_election_no_winner: 'The election ended with no winner. {oldLeaderName} remains in power.',
    log_action_vote_cast: '{agentName} voted for {candidateName}.',
    log_action_vote_no_election: '{agentName} wants to vote, but there is no active election.',
    log_action_vote_no_candidates: '{agentName} wants to vote, but there are no candidates.',
    log_action_vote_undecided: '{agentName} could not decide who to vote for.',
    log_action_run_for_election_success: '{agentName} has announced their candidacy for leader!',
    log_action_run_for_election_no_election: '{agentName} wants to run, but there is no active election.',
    log_action_run_for_election_already_running: '{agentName} is already running for leader.',
    log_action_run_for_election_low_status: '{agentName} lacks the social status to run for leader.',
    log_action_enact_law_success: '📜 Leader {agentName} has enacted a new law: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} tried to enact a law, but is not the leader.',
    log_action_enact_law_exists: 'Leader {agentName} tried to enact law "{lawName}", but it already exists.',
    log_tech_unlocked: '💡 The {cultureName} culture has discovered {techName}!',
    log_action_research: '🔬 Scientist {agentName} contributes {points} points to their culture\'s research.',
    log_action_research_no_culture: '{agentName} cannot research without a culture.',
    log_action_share_knowledge: '🤝 {agentName1} and {agentName2} share insights, boosting research.',
    log_action_share_knowledge_no_one: '{agentName} looked for another scientist to collaborate with, but found none.',
    log_action_wander_thoughtfully: '{agentName} wanders thoughtfully.',
    log_goal_generated: '💡 {agentName} has a new goal: {goalDescription}',
    log_promotion: '🎉 {agentName} has been promoted to a new role: {newRole}!',
    log_action_propose_marriage_success: '💍 {agentName} proposes to {targetName}!',
    log_action_propose_marriage_fail: '{targetName} is not interested in {agentName}\'s proposal.',
    log_action_propose_no_one_suitable: '{agentName} wants to propose, but finds no one suitable nearby.',
    log_action_propose_fail_already_married: '{agentName} tried to propose, but is already married.',
    log_action_accept_proposal_success: '💒 {agentName} accepts {targetName}\'s proposal! They are now married.',
    log_action_accept_proposal_none: '{agentName} has no pending proposals to accept.',
    log_action_reproduce_success: '❤️ Congratulations! {agentName} and {partnerName} are having a child!',
    log_action_reproduce_fail: '{agentName} and {partnerName} tried to have a child, but it was not the right time.',
    log_action_reproduce_fail_age: '{agentName} and {partnerName} are not in the right age range to have children.',
    log_action_reproduce_fail_max_offspring: '{agentName} and {partnerName} have already reached the maximum number of children.',
    log_action_reproduce_no_partner: '{agentName} wants a child, but has no partner or is not near them.',
    log_new_child: '👶 A new child, {childName}, was born to {parent1Name} and {parent2Name}.',
    personality_title: 'Personality Traits',
    personality_openness: 'Openness',
    personality_conscientiousness: 'Conscientiousness',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Agreeableness',
    personality_neuroticism: 'Neuroticism',
    skill_healing: 'Healing',
    skill_woodcutting: 'Woodcutting',
    skill_rhetoric: 'Rhetoric',
    skill_combat: 'Combat',
    skill_construction: 'Construction',
    skill_farming: 'Farming',
    skill_mining: 'Mining',
    skill_crafting: 'Crafting',
    skill_trading: 'Trading',
    goal_becomeLeader: 'Become Leader',
    goal_buildLargeHouse: 'Build a House',
    goal_masterSkill: 'Master a Skill',
    goal_avengeRival: 'Avenge Rival',
    goal_achieveWealth: 'Achieve Wealth',
    tech_agriculture: 'Agriculture',
    tech_metallurgy: 'Metallurgy',
    tech_writing: 'Writing',
    tech_chemistry: 'Chemistry',
    tech_governance: 'Governance',
  },
  de: {
    // App.tsx
    realitySimAI: 'RealitySim KI',
    agents: 'Agenten',
    deceased: 'Verstorben',
    entities: 'Entitäten',
    environment: 'Umgebung',
    availableActions: 'Verfügbare Aktionen',
    agentCard_selectAgent: 'Wähle einen Agenten aus, um Details anzuzeigen.',
    confirmDelete: 'Möchtest du diesen {type} wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.',
    type_agent: 'Agent',
    type_entity: 'Entität',
    type_action: 'Aktion',
    // Logs
    log_simulationInitialized: 'Simulation initialisiert.',
    log_simulationStepped: 'Simulation einen Schritt weiter.',
    log_simulationRanSteps: 'Simulation lief für {steps} Schritte.',
    log_simulationReset: 'Simulation auf Anfangszustand zurückgesetzt.',
    log_agentProcessingPrompt: 'Agent {agentId} verarbeitet Befehl: "{prompt}" (mit {aiInfo})',
    log_aiSuggestedAction: 'KI schlug Aktion vor: "{action}"',
    log_aiFailed: 'KI konnte keine passende Aktion finden. Keine Aktion ausgeführt.',
    log_aiError: 'Fehler bei der KI-API: {error}',
    error_lmStudio_cors: 'Verbindung zu LM Studio fehlgeschlagen. Dies ist normalerweise ein Cross-Origin Resource Sharing (CORS) Problem. Bitte überprüfe Folgendes in deiner LM Studio Anwendung: 1. Gehe zum "Local Server" Tab. 2. Stelle sicher, dass der Server "Running" ist. 3. **Wichtig: Finde die "CORS" Option und stelle sicher, dass sie aktiviert ist.** 4. Überprüfe, ob die URL in den Einstellungen dieser App mit der in LM Studio angezeigten übereinstimmt.',
    error_lmStudio_url_invalid: "Ungültiges LM Studio URL-Format. Bitte gib eine gültige Basis-URL wie 'http://localhost:1234' an.",
    error_gemini_no_key: 'Google Gemini API-Schlüssel nicht in Umgebungsvariablen gefunden. Bitte sicherstellen, dass er gesetzt ist.',
    log_createdAgent: 'Neuer Agent erstellt: {name}',
    log_createdEntity: 'Neue Entität erstellt: {name}',
    log_createdAction: 'Neue Aktion erstellt: {name}',
    log_removed: '{type} entfernt: {name}',
    log_adminSetHealth: "Admin hat die Gesundheit von {name} auf {health} gesetzt.",
    log_adminSetPosition: "Admin hat die Position von {name} auf ({x}, {y}) gesetzt.",
    log_adminInflictedSickness: "Admin hat {name} mit {sickness} infiziert.",
    log_adminCured: 'Admin hat {name} geheilt.',
    log_adminResurrected: 'Admin hat {name} wiederbelebt.',
    log_adminModifiedEnv: 'Admin hat die Umgebung direkt modifiziert.',
    log_exported: 'Teil-Daten exportiert: {type}.',
    log_stateSaved: 'Simulationszustand in Datei gespeichert.',
    log_stateLoaded: 'Simulationszustand erfolgreich aus Datei geladen.',
    log_loadError: 'Fehler beim Laden des Zustands aus Datei: {error}',
    log_runningSimulation: 'Führe Simulation für {steps} Schritte aus...',
    log_generating: 'Generiere...',
    log_generatingWorld: 'Generiere Welt...',
    log_worldGenerated: 'Neue Welt erfolgreich verarbeitet.',
    log_worldGenerated_warning: '⚠️ KI hat {genAgents}/{reqAgents} Agenten und {genEntities}/{reqEntities} Entitäten generiert. Fahre mit generierten Ergebnissen fort.',
    log_generatingAgents: 'Generiere {count} neue Agenten...',
    log_generatingEntities: 'Generiere {count} neue Entitäten...',
    log_addedAgents: '{count} neue Agenten zur Welt hinzugefügt.',
    log_addedEntities: '{count} neue Entitäten zur Welt hinzugefügt.',
    log_configure_ai_full: 'KI-Anbieter nicht konfiguriert. Bitte öffne die Einstellungen, um einen KI-Anbieter auszuwählen und zu konfigurieren.',
    log_adminSetCurrency: "Admin hat die Währung von {name} auf {currency}$ gesetzt.",
    log_adminRepealedLaw: "Admin hat das Gesetz aufgehoben: {lawName}.",
    log_adminSetLeader: "Admin hat {name} zum neuen Anführer ernannt.",
    log_adminUnlockedTech: "Admin hat Technologie \"{techId}\" für {cultureName} freigeschaltet.",
    // Settings
    settings_title: 'Einstellungen',
    settings_aiProvider_label: 'KI-Anbieter',
    settings_lmStudioUrl_label: 'LM Studio API-Endpunkt',
    settings_lmStudioUrl_description: 'Gib die Basis-URL von deinem lokalen LM Studio Server ein (z.B. http://localhost:1234). Der API-Pfad wird automatisch hinzugefügt.',
    settings_lmStudioModel_label: 'Modellname',
    settings_lmStudioModel_description: 'Gib den API-Identifier des Modells aus LM Studio ein (z.B. google/gemma-2b-it), nicht den Dateinamen.',
    settings_geminiModel_label: 'Gemini-Modell',
    settings_geminiModel_description: 'Wähle das zu verwendende Google Gemini Modell.',
    settings_geminiApiKey_label: 'Gemini API-Schlüssel',
    settings_geminiApiKey_value: 'Geladen aus Umgebungsvariable',
    settings_geminiApiKey_description: 'Dein Google AI API-Schlüssel muss als Umgebungsvariable mit dem Namen API_KEY verfügbar sein.',
    settings_save: 'Speichern',
    settings_cancel: 'Abbrechen',
    // Generate World Modal
    generateWorldModal_title: 'Neue Welt generieren',
    generateWorldModal_agentsLabel: 'Anzahl der Agenten',
    generateWorldModal_agentsDescription: 'Wie viele Agenten sollen die neue Welt bevölkern?',
    generateWorldModal_entitiesLabel: 'Anzahl der Entitäten',
    generateWorldModal_entitiesDescription: 'Wie viele Entitäten (Objekte, Tiere) soll es in der neuen Welt geben?',
    generateWorldModal_generate: 'Generieren',
    // Generate Content Modal
    generateContent_title: 'Inhalte mit KI generieren',
    generateContent_addAgents: 'Neue Agenten hinzufügen',
    generateContent_addEntities: 'Neue Entitäten hinzufügen',
    generateContent_agentsLabel: 'Anzahl neuer Agenten',
    generateContent_agentsDescription: 'Wie viele neue Agenten sollen generiert und der Welt hinzugefügt werden?',
    generateContent_entitiesLabel: 'Anzahl neuer Entitäten',
    generateContent_entitiesDescription: 'Wie viele neue Entitäten/Ressourcen sollen generiert und der Welt hinzugefügt werden?',
    generateContent_generateAgentsBtn: 'Agenten generieren',
    generateContent_generateEntitiesBtn: 'Entitäten generieren',
    // AgentCard.tsx
    agentCard_statusAndNeeds: 'Status & Bedürfnisse',
    agentCard_age: 'Alter',
    agentCard_culture: 'Kultur',
    agentCard_religion: 'Religion',
    agentCard_role: 'Rolle',
    agentCard_lifeStage: 'Lebensphase',
    agentCard_health: 'Gesundheit',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Durst',
    agentCard_fatigue: 'Müdigkeit',
    agentCard_sickness: 'Krankheit',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Sozialstatus',
    agentCard_currency: 'Währung',
    agentCard_healthy: 'Gesund',
    agentCard_deceased: 'VERSTORBEN',
    agentCard_imprisoned: 'INHAFTIERT',
    agentCard_release_at: 'Freilassung bei Schritt:',
    agentCard_beliefs: 'Überzeugungen',
    agentCard_emotions: 'Situative Emotionen',
    agentCard_interact: 'Interagieren',
    agentCard_promptPlaceholder: 'Befehl für {name} (KI interpretiert)...',
    agentCard_promptPlaceholderRaw: 'Exakten Aktionsnamen eingeben...',
    agentCard_promptPlaceholderDeceased: '{name} kann nicht antworten.',
    agentCard_useAi: 'KI benutzen',
    agentCard_noBeliefs: 'Keine Überzeugungen',
    agentCard_noEmotions: 'Keine Emotionen',
    agentCard_relationships: 'Beziehungen',
    agentCard_noRelationships: 'Keine Beziehungen etabliert.',
    agentCard_inventory: 'Inventar',
    agentCard_noInventory: 'Inventar ist leer.',
    agentCard_personality: 'Persönlichkeit',
    agentCard_skills: 'Fähigkeiten',
    agentCard_goals: 'Aktive Ziele',
    agentCard_noGoals: 'Keine aktiven Ziele.',
    agentCard_trauma: 'Traumata',
    agentCard_noTrauma: 'Keine Traumata verzeichnet.',
    agentCard_tech: 'Bekannte Technologien',
    agentCard_noTech: 'Keine Technologien bekannt.',
    agentCard_noData: 'Keine Daten.',
    agentCard_genome: 'Genom & Merkmale',
    agentCard_noGenome: 'Keine nennenswerten genetischen Merkmale.',
    // Genes
    'gene_G-RESISTANT': 'Resistent',
    'gene_G-AGILE': 'Agil',
    'gene_G-SOCIAL': 'Sozial',
    'gene_G-LONGEVITY': 'Langlebigkeit',
    'gene_G-FASTHEAL': 'Schnelle Heilung',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_G-FERTILE': 'Fruchtbar',
    'gene_desc_G-RESISTANT': 'Reduziert Gesundheitsverlust durch Krankheit und erhöht die Erholungschance.',
    'gene_desc_G-AGILE': 'Bewegt sich schneller (2 Schritte statt 1).',
    'gene_desc_G-SOCIAL': 'Initiiert wahrscheinlicher Gespräche.',
    'gene_desc_G-LONGEVITY': 'Reduziert Gesundheitsverlust durch hohes Alter.',
    'gene_desc_G-FASTHEAL': 'Stellt beim Ausruhen mehr Gesundheit wieder her.',
    'gene_desc_G-INTELLIGENT': 'Lernt Fähigkeiten und sammelt Forschungspunkte schneller.',
    'gene_desc_G-FERTILE': 'Erhöhte Chance auf erfolgreiche Fortpflanzung.',
    // Resource & Item Types
    resource_food: 'Nahrung',
    resource_water: 'Wasser',
    resource_wood: 'Holz',
    resource_medicine: 'Medizin',
    resource_iron: 'Eisen',
    item_sword: 'Schwert',
    item_plow: 'Pflug',
    item_advanced_medicine: 'Fortschrittliche Medizin',
    item_iron_ingot: 'Eisenbarren',
    // Relationship Types
    relationship_stranger: 'Fremder',
    relationship_acquaintance: 'Bekannter',
    relationship_friend: 'Freund',
    relationship_rival: 'Rivale',
    relationship_partner: 'Partner',
    relationship_spouse: 'Ehepartner',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages & Roles
    lifeStage_child: 'Kind',
    lifeStage_adolescent: 'Jugendlicher',
    lifeStage_adult: 'Erwachsener',
    lifeStage_elder: 'Ältester',
    role_worker: 'Arbeiter',
    role_healer: 'Heiler',
    role_scientist: 'Wissenschaftler',
    role_leader: 'Anführer',
    role_trader: 'Händler',
    role_crafter: 'Handwerker',
    role_guard: 'Wache',
    role_none: 'Keine',
    // Cultures & Religions
    culture_none: 'Keine',
    religion_none: 'Keine',
    // ControlPanel.tsx
    controlPanel_step: 'Schritt',
    controlPanel_run: 'Start',
    controlPanel_reset: 'Reset',
    controlPanel_generateWorld: 'Welt generieren',
    controlPanel_addWithAI: 'Mit KI hinzufügen',
    // CreateObjectPanel.tsx
    create_createNew: 'Neu erstellen',
    create_agent: 'Agent',
    create_entity: 'Entität',
    create_action: 'Aktion',
    create_name: 'Name',
    create_description: 'Beschreibung',
    create_beliefsPlaceholder: 'Überzeugungen (JSON Format z.B. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief-Schlüssel (optional)',
    create_genome_placeholder: 'Gene (z.B. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Zufällige Gene generieren',
    create_create: 'Erstellen',
    create_invalidJson: 'Ungültiges JSON für Überzeugungen. Bitte benutze {"key": value} Format.',
    create_role_label: 'Rolle:',
    create_randomize_personality: 'Zufällige Persönlichkeit',
    // LogPanel.tsx
    logPanel_eventLog: 'Ereignisprotokoll',
    // WorldGraph.tsx
    worldGraph_title: 'Weltkarte',
    // ExporterPanel.tsx
    stateManagement_title: 'Zustand speichern & laden',
    stateManagement_save: 'Ganzen Zustand speichern',
    stateManagement_load: 'Ganzen Zustand laden',
    stateManagement_advanced: 'Erweiterte Exportoptionen',
    export_env: 'Nur Umgebung exportieren',
    export_agents: 'Nur Agenten exportieren',
    export_entities: 'Nur Entitäten exportieren',
    // AdminPanel.tsx
    admin_title: 'Admin-Kontrollpanel',
    admin_politicalManagement: 'Politische Verwaltung',
    admin_currentLeader: 'Aktueller Anführer',
    admin_startElection: 'Wahl starten',
    admin_laws: 'Gesetze',
    admin_addLaw: 'Gesetz hinzufügen',
    admin_lawName: 'Gesetzname',
    admin_violatingAction: 'Verletzende Aktion',
    admin_techManagement: 'Technologieverwaltung',
    admin_researchPoints: 'Forschungspunkte',
    admin_envOverride: 'Umgebung überschreiben',
    admin_updateEnv: 'Umgebung aktualisieren',
    admin_ruleEditor: 'Weltregel-Editor',
    admin_createAction: 'Neue Aktion erstellen',
    admin_createActionBtn: 'Aktion erstellen',
    admin_existingActions: 'Existierende Aktionen',
    admin_agentManagement: 'Agentenverwaltung',
    admin_resurrect: 'Wiederbeleben',
    admin_set: 'Setzen',
    admin_sicknessPlaceholder: 'Keine',
    // Action Logs
    log_action_eat: '🍎 {agentName} isst etwas Nahrung und reduziert seinen Hunger.',
    log_action_eat_no_food: '{agentName} möchte essen, hat aber keine Nahrung im Inventar.',
    log_action_drink: '💧 {agentName} trinkt aus {sourceName} und löscht seinen Durst.',
    log_action_drink_no_source: '{agentName} ist durstig, findet aber keine Wasserquelle in der Nähe.',
    log_action_gather_food: '🧺 {agentName} sammelt {amount} Nahrung von {sourceName}.',
    log_action_gather_food_no_source: '{agentName} sucht nach Nahrung, findet aber keine Quellen in der Nähe.',
    log_action_gather_wood: '🪵 {agentName} sammelt {amount} Holz von {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} sucht nach Holz, findet aber keine Quellen in der Nähe.',
    log_action_build_shelter: '🏡 {agentName} benutzt 10 Holz, um einen kleinen Unterschlupf zu bauen.',
    log_action_build_shelter_no_wood: '{agentName} möchte einen Unterschlupf bauen, benötigt aber {woodCost} Holz.',
    log_action_move_towards_resource: '{agentName} bewegt sich in Richtung {resourceName}.',
    log_action_move_towards_agent: '{agentName} bewegt sich in Richtung {targetName}.',
    log_action_move: '{agentName} bewegt sich nach {direction} zu ({x}, {y}).',
    log_action_custom: 'Benutzerdefinierte Aktion "{actionName}" von {agentName} ausgeführt.',
    log_action_fight: '💥 {agentName1} und {agentName2} gerieten in einen Kampf!',
    log_action_steal_success: '✋ {stealer} hat 1 {item} von {victim} gestohlen!',
    log_action_steal_fail: '{stealer} vermasselte einen Diebstahlversuch bei {victim} und wurde erwischt!',
    log_action_steal_no_target: '{agentName} suchte jemanden zum Bestehlen, fand aber keine geeigneten Ziele.',
    log_action_rest: '💤 {agentName} ruht sich aus und stellt seine Gesundheit auf {newHealth} wieder her.',
    log_action_rest_and_cured: '💤 {agentName} ruht sich aus, erholt sich und spürt, wie seine {sickness} nachlässt!',
    log_action_talk: '💬 {speakerName} sagt zu {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wollte reden, aber niemand war in der Nähe.',
    log_action_talk_failed: '{agentName} versuchte ein Gespräch zu beginnen, verlor sich aber in Gedanken.',
    log_survival_starving: '‼️ {agentName} verhungert und verliert Gesundheit!',
    log_survival_dehydrated: '‼️ {agentName} ist dehydriert und verliert Gesundheit!',
    log_survival_sickness: '🤢 {agentName} leidet an {sickness} und verliert an Gesundheit.',
    log_survival_succumbed_needs: '💀 {agentName} ist Hunger oder Durst erlegen.',
    log_execution_deceased: '{agentName} kann keine Aktionen ausführen, da er verstorben ist.',
    log_execution_actionNotFound: '{agentName} konnte keine passende Aktion für den Befehl finden: "{prompt}"',
    log_execution_imprisoned: '{agentName} kann im Gefängnis keine Aktionen ausführen.',
    log_action_fail_role: '{agentName} kann diese Aktion nicht ausführen, benötigt Rolle: {requiredRole}.',
    log_action_work_for_money: '💰 {agentName} arbeitet einen Tag und verdient {amount}$.',
    log_action_mine_iron: '⛏️ {agentName} baut {amount} Eisen von {sourceName} ab.',
    log_action_mine_iron_no_source: '{agentName} sucht nach Eisen, findet aber keine Quellen in der Nähe.',
    log_action_craft_success: '🛠️ {agentName} hat erfolgreich einen {itemName} hergestellt.',
    log_action_craft_fail_ingredients: '{agentName} versuchte, einen {itemName} herzustellen, aber es fehlten Zutaten.',
    log_action_craft_fail_skill: '{agentName} fehlt die Fähigkeit ({skill} {level}) zum Herstellen.',
    log_action_craft_fail_tech: '{agentName} fehlt die Technologie ({tech}) zum Herstellen.',
    log_action_market_list_item: '📈 {agentName} hat 1 {item} auf dem Markt zum Systempreis von {price}$ angeboten.',
    log_action_market_buy_item: '🛒 {agentName} hat 1 {item} von {sellerName} für {price}$ gekauft.',
    log_action_market_too_far: '{agentName} ist zu weit vom Marktplatz entfernt, um zu handeln.',
    log_action_market_no_items: '{agentName} ging zum Markt, hat aber nichts zu verkaufen.',
    log_action_market_is_empty: '{agentName} besuchte den Markt, aber er war leer.',
    log_action_market_cannot_afford: '{agentName} konnte sich keine Gegenstände auf dem Markt leisten.',
    log_law_violation: '⚖️ {agentName} hat gegen das "{lawName}"-Gesetz verstoßen und wurde mit {punishment}$ bestraft.',
    log_law_violation_arrest: '⚖️ Wache {guardName} hat beobachtet, wie {criminalName} das Gesetz gebrochen hat, und hat ihn verhaftet!',
    log_action_arrest_success: '⛓️ {guardName} hat {criminalName} verhaftet und ins Gefängnis gebracht.',
    log_action_release_from_jail: '{agentName} hat seine Zeit abgesessen und wird aus dem Gefängnis entlassen.',
    log_action_patrol: '🛡️ Wache {agentName} patrouilliert das Gebiet.',
    log_election_started: '🗳️ Eine Wahl für einen neuen Anführer hat begonnen!',
    log_election_winner: '🏆 {winnerName} hat die Wahl mit {votes} Stimmen gewonnen und ist der neue Anführer!',
    log_election_no_winner: 'Die Wahl endete ohne Sieger. {oldLeaderName} bleibt an der Macht.',
    log_action_vote_cast: '{agentName} hat für {candidateName} gestimmt.',
    log_action_vote_no_election: '{agentName} möchte wählen, aber es gibt keine aktive Wahl.',
    log_action_vote_no_candidates: '{agentName} möchte wählen, aber es gibt keine Kandidaten.',
    log_action_vote_undecided: '{agentName} konnte sich nicht entscheiden, wen er wählen soll.',
    log_action_run_for_election_success: '{agentName} hat seine Kandidatur als Anführer bekannt gegeben!',
    log_action_run_for_election_no_election: '{agentName} möchte kandidieren, aber es gibt keine aktive Wahl.',
    log_action_run_for_election_already_running: '{agentName} kandidiert bereits als Anführer.',
    log_action_run_for_election_low_status: '{agentName} fehlt der soziale Status, um als Anführer zu kandidieren.',
    log_action_enact_law_success: '📜 Anführer {agentName} hat ein neues Gesetz erlassen: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} versuchte, ein Gesetz zu erlassen, ist aber nicht der Anführer.',
    log_action_enact_law_exists: 'Anführer {agentName} versuchte, das Gesetz "{lawName}" zu erlassen, aber es existiert bereits.',
    log_tech_unlocked: '💡 Die {cultureName}-Kultur hat {techName} entdeckt!',
    log_action_research: '🔬 Wissenschaftler {agentName} trägt {points} Punkte zur Forschung seiner Kultur bei.',
    log_action_research_no_culture: '{agentName} kann ohne Kultur nicht forschen.',
    log_action_share_knowledge: '🤝 {agentName1} und {agentName2} tauschen Erkenntnisse aus und fördern die Forschung.',
    log_action_share_knowledge_no_one: '{agentName} suchte nach einem anderen Wissenschaftler zur Zusammenarbeit, fand aber keinen.',
    log_action_wander_thoughtfully: '{agentName} wandert nachdenklich umher.',
    log_goal_generated: '💡 {agentName} hat ein neues Ziel: {goalDescription}',
    log_promotion: '🎉 {agentName} wurde in eine neue Rolle befördert: {newRole}!',
    log_action_propose_marriage_success: '💍 {agentName} macht {targetName} einen Heiratsantrag!',
    log_action_propose_marriage_fail: '{targetName} ist nicht an dem Antrag von {agentName} interessiert.',
    log_action_propose_no_one_suitable: '{agentName} möchte einen Antrag machen, findet aber niemanden Geeigneten in der Nähe.',
    log_action_propose_fail_already_married: '{agentName} versuchte einen Antrag zu machen, ist aber bereits verheiratet.',
    log_action_accept_proposal_success: '💒 {agentName} nimmt den Antrag von {targetName} an! Sie sind nun verheiratet.',
    log_action_accept_proposal_none: '{agentName} hat keine ausstehenden Anträge, die er annehmen könnte.',
    log_action_reproduce_success: '❤️ Herzlichen Glückwunsch! {agentName} und {partnerName} bekommen ein Kind!',
    log_action_reproduce_fail: '{agentName} und {partnerName} haben versucht, ein Kind zu bekommen, aber es war nicht der richtige Zeitpunkt.',
    log_action_reproduce_fail_age: '{agentName} und {partnerName} sind nicht im richtigen Alter, um Kinder zu bekommen.',
    log_action_reproduce_fail_max_offspring: '{agentName} und {partnerName} haben bereits die maximale Anzahl an Kindern erreicht.',
    log_action_reproduce_no_partner: '{agentName} möchte ein Kind, hat aber keinen Partner oder ist nicht in dessen Nähe.',
    log_new_child: '👶 Ein neues Kind, {childName}, wurde von {parent1Name} und {parent2Name} geboren.',
    personality_title: 'Persönlichkeitsmerkmale',
    personality_openness: 'Offenheit',
    personality_conscientiousness: 'Gewissenhaftigkeit',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Verträglichkeit',
    personality_neuroticism: 'Neurotizismus',
    skill_healing: 'Heilung',
    skill_woodcutting: 'Holzfällen',
    skill_rhetoric: 'Rhetorik',
    skill_combat: 'Kampf',
    skill_construction: 'Konstruktion',
    skill_farming: 'Landwirtschaft',
    skill_mining: 'Bergbau',
    skill_crafting: 'Handwerk',
    skill_trading: 'Handel',
    goal_becomeLeader: 'Anführer werden',
    goal_buildLargeHouse: 'Ein Haus bauen',
    goal_masterSkill: 'Eine Fähigkeit meistern',
    goal_avengeRival: 'Rivalen rächen',
    goal_achieveWealth: 'Reichtum erlangen',
    tech_agriculture: 'Landwirtschaft',
    tech_metallurgy: 'Metallurgie',
    tech_writing: 'Schrift',
    tech_chemistry: 'Chemie',
    tech_governance: 'Regierungsführung',
  },
};

export type TranslationKey = keyof typeof translations.en;