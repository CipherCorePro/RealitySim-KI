export const translations = {
  en: {
    // App.tsx
    realitySimAI: 'RealitySim AI',
    agents: 'Agents',
    deceased: 'Deceased',
    entities: 'Entities',
    environment: 'Environment',
    availableActions: 'Available Actions',
    agentCard_selectAgent: 'Select an agent to view details.',
    confirmDelete: 'Are you sure you want to delete this {type}? This action cannot be undone.',
    type_agent: 'agent',
    type_entity: 'entity',
    type_action: 'action',
    processingSteps: 'Processing step(s)...',
    // Logs
    log_simulationInitialized: 'Simulation initialized.',
    log_simulationStepped: 'Simulation stepped forward.',
    log_simulationRanSteps: 'Simulation ran for {steps} steps.',
    log_simulationReset: 'Simulation reset to initial state.',
    log_agentProcessingPrompt: 'Agent {agentId} processing prompt: "{prompt}" (using {aiInfo})',
    log_aiSuggestedAction: 'AI suggested action: "{action}"',
    log_aiFailed: 'AI could not find a suitable action. No action taken.',
    log_aiError: 'Error with AI API: {error}',
    error_lmStudio_cors: 'Failed to connect to LM Studio. This is usually a Cross-Origin Resource Sharing (CORS) issue. Please check the following in your LM Studio application: 1. Go to the "Local Server" tab. 2. Ensure the server is "Running". 3. **Crucially, find the "CORS" option and make sure it is checked/enabled.** 4. Verify the URL in this app\'s settings matches the one shown in LM Studio.',
    error_lmStudio_url_invalid: "Invalid LM Studio URL format. Please provide a valid base URL like 'http://localhost:1234'.",
    error_gemini_no_key: 'Google Gemini API key not found in environment variables. Please ensure it is set.',
    log_createdAgent: 'Created new agent: {name}',
    log_createdEntity: 'Created new entity: {name}',
    log_createdAction: 'Created new action: {name}',
    log_removed: 'Removed {type}: {name}',
    log_adminSetHealth: "Admin set {name}'s health to {health}.",
    log_adminSetPosition: "Admin set {name}'s position to ({x}, {y}).",
    log_adminInflictedSickness: "Admin inflicted {name} with {sickness}.",
    log_adminCured: 'Admin cured {name}.',
    log_adminResurrected: 'Admin resurrected {name}.',
    log_adminModifiedEnv: 'Admin directly modified the environment.',
    log_exported: 'Exported partial {type} data.',
    log_stateSaved: 'Simulation state saved to file.',
    log_stateLoaded: 'Simulation state successfully loaded from file.',
    log_loadError: 'Failed to load state from file: {error}',
    log_runningSimulation: 'Running simulation for {steps} steps...',
    log_generating: 'Generating...',
    log_generatingWorld: 'Generating world...',
    log_worldGenerated: 'New world processed successfully.',
    log_worldGenerated_warning: '‚ö†Ô∏è AI generated {genAgents}/{reqAgents} agents and {genEntities}/{reqEntities} entities. Continuing with generated results.',
    log_generatingAgents: 'Generating {count} new agents...',
    log_generatingEntities: 'Generating {count} new entities...',
    log_addedAgents: 'Added {count} new agents to the world.',
    log_addedEntities: 'Added {count} new entities to the world.',
    log_configure_ai_full: 'AI provider not configured. Please open settings to select and configure an AI provider.',
    log_adminSetCurrency: "Admin set {name}'s currency to {currency}$.",
    log_adminRepealedLaw: "Admin repealed the law: {lawName}.",
    log_adminSetLeader: "Admin has appointed {name} as the new leader.",
    log_adminUnlockedTech: "Admin unlocked technology \"{techId}\" for {cultureName}.",
    log_adminImprisoned: "Admin has imprisoned {name} for {duration} steps.",
    log_psychoanalysis_applied: 'üß¨ Psychoanalysis results have been integrated into {agentName}\'s psyche.',
    log_grief: 'üíî {agentName} is struck with grief over the death of {deceasedName}.',
    log_sickness_spread: '‚ò£Ô∏è {infectedName} caught {sickness} from {sourceName}!',
    log_action_custom_success: '{agentName} successfully performed the custom action: "{actionName}".',
    log_action_custom_fail_cost: '{agentName} tried to perform "{actionName}" but lacked {amount} {item}.',
    // Settings
    settings_title: 'Settings',
    settings_aiProvider_label: 'AI Provider',
    settings_lmStudioUrl_label: 'LM Studio API Endpoint',
    settings_lmStudioUrl_description: 'Enter the base URL from your local LM Studio server (e.g., http://localhost:1234). The API path will be added automatically.',
    settings_lmStudioModel_label: 'Model Name',
    settings_lmStudioModel_description: "Enter the model's API identifier from LM Studio for chat completions (e.g., google/gemma-2b-it). This model must be loaded in the server.",
    settings_lmStudioEmbeddingModel_label: 'Embedding Model Name (optional)',
    settings_lmStudioEmbeddingModel_description: 'Enter the model identifier for embeddings. If empty, the chat model will be used. This model must be loaded in your LM Studio server and selected for the embeddings endpoint.',
    settings_geminiModel_label: 'Gemini Model',
    settings_geminiModel_description: 'Select the Google Gemini model to use.',
    settings_geminiApiKey_label: 'Gemini API Key',
    settings_geminiApiKey_value: 'Loaded from environment variable',
    settings_geminiApiKey_description: 'Your Google AI API key must be available as an environment variable named API_KEY.',
    settings_save: 'Save',
    settings_cancel: 'Cancel',
    // Generate World Modal
    generateWorldModal_title: 'Generate New World',
    generateWorldModal_agentsLabel: 'Number of Agents',
    generateWorldModal_agentsDescription: 'How many agents should populate the new world?',
    generateWorldModal_entitiesLabel: 'Entities',
    generateWorldModal_entitiesDescription: 'Specify how many of each entity type should exist in the new world. Marketplace and Jail will be included in the Buildings count.',
    generateWorldModal_generate: 'Generate',
    // Generate Content Modal
    generateContent_title: 'Generate Content with AI',
    generateContent_addAgents: 'Add New Agents',
    generateContent_addEntities: 'Add New Entities',
    generateContent_agentsLabel: 'Number of new agents',
    generateContent_agentsDescription: 'How many new agents to generate and add to the world?',
    generateContent_entitiesLabel: 'Number of new entities',
    generateContent_entitiesDescription: 'How many new entities/resources to generate and add to the world?',
    generateContent_generateAgentsBtn: 'Generate Agents',
    generateContent_generateEntitiesBtn: 'Generate Entities',
    generateContent_foodSources: 'Food Sources',
    generateContent_waterSources: 'Water Sources',
    generateContent_woodSources: 'Wood Sources',
    generateContent_ironSources: 'Iron Sources',
    generateContent_buildings: 'Buildings/Objects',
    generateContent_entitiesDescriptionCategorized: 'Specify how many of each entity type to generate and add to the world.',
    // AgentCard.tsx
    agentCard_statusAndNeeds: 'Status & Needs',
    agentCard_age: 'Age',
    agentCard_culture: 'Culture',
    agentCard_religion: 'Religion',
    agentCard_role: 'Role',
    world_leader: 'Current Leader',
    agentCard_lifeStage: 'Life Stage',
    agentCard_health: 'Health',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Thirst',
    agentCard_fatigue: 'Fatigue',
    agentCard_sickness: 'Sickness',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Social Status',
    agentCard_currency: 'Currency',
    agentCard_healthy: 'Healthy',
    agentCard_deceased: 'DECEASED',
    agentCard_imprisoned: 'IMPRISONED',
    agentCard_release_at: 'Release at step:',
    agentCard_beliefs: 'Beliefs',
    agentCard_emotions: 'Situational Emotions',
    agentCard_interact: 'Interact',
    agentCard_promptPlaceholder: 'Prompt for {name} (AI will interpret)...',
    agentCard_promptPlaceholderRaw: 'Enter exact action name...',
    agentCard_promptPlaceholderDeceased: '{name} cannot respond.',
    agentCard_useAi: 'Use AI',
    agentCard_noBeliefs: 'No beliefs',
    agentCard_noEmotions: 'No emotions',
    agentCard_relationships: 'Relationships',
    agentCard_noRelationships: 'No relationships established.',
    agentCard_inventory: 'Inventory',
    agentCard_noInventory: 'Inventory is empty.',
    agentCard_personality: 'Personality',
    agentCard_skills: 'Skills',
    agentCard_goals: 'Active Goals',
    agentCard_noGoals: 'No active goals.',
    agentCard_trauma: 'Trauma',
    agentCard_noTrauma: 'No traumas recorded.',
    agentCard_tech: 'Known Technologies',
    agentCard_noTech: 'No technologies known.',
    agentCard_noData: 'No data.',
    agentCard_genome: 'Genome & Traits',
    agentCard_noGenome: 'No notable genetic traits.',
    agentCard_property: 'Property',
    agentCard_noProperty: 'Owns no property.',
    agentCard_longTermMemory: 'Long-Term Memory',
    agentCard_noMemories: 'No memories recorded.',
    agentCard_family: 'Family',
    agentCard_child_relation: 'Child',
    agentCard_no_children: 'No children.',
    agentCard_jailJournal: 'Jail Journal',
    agentCard_noJournalEntries: 'No journal entries yet.',
    // Psychoanalysis
    psychoanalysis_title: 'Psychological Profile',
    psyche_title: 'Psyche & Drives',
    psychoanalysis_generate_button: 'View Psychological Profile',
    psychoanalysis_generating: 'Generating profile...',
    report_psychodynamik: 'Psychodynamics',
    report_persoenlichkeitsbild: 'Personality Profile',
    report_beziehungsdynamik: 'Relationship Dynamics',
    report_trauma: 'Traumatic Traces / Psychological Stress',
    report_kultur: 'Cultural & Spiritual Processing',
    report_projektionen: 'Projections or Displacements',
    report_empfehlung: 'Therapeutic Recommendation',
    // Genes
    'gene_G-RESISTANT': 'Resistant',
    'gene_G-AGILE': 'Agile',
    'gene_G-SOCIAL': 'Social',
    'gene_G-LONGEVITY': 'Longevity',
    'gene_G-FASTHEAL': 'Fast Heal',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_G-FERTILE': 'Fertile',
    'gene_desc_G-RESISTANT': 'Reduces health loss from sickness and increases recovery chance.',
    'gene_desc_G-AGILE': 'Moves faster (2 steps instead of 1).',
    'gene_desc_G-SOCIAL': 'More likely to initiate conversations.',
    'gene_desc_G-LONGEVITY': 'Reduces health loss from old age.',
    'gene_desc_G-FASTHEAL': 'Recovers more health when resting.',
    'gene_desc_G-INTELLIGENT': 'Gains skills and research points more quickly.',
    'gene_desc_G-FERTILE': 'Increased chance of successful reproduction.',
    // Resource & Item Types
    resource_food: 'Food',
    resource_water: 'Water',
    resource_wood: 'Wood',
    resource_medicine: 'Medicine',
    resource_iron: 'Iron',
    item_food: 'Food',
    item_water: 'Water',
    item_wood: 'Wood',
    item_medicine: 'Medicine',
    item_iron: 'Iron',
    item_sword: 'Sword',
    item_plow: 'Plow',
    item_advanced_medicine: 'Advanced Medicine',
    item_iron_ingot: 'Iron Ingot',
    item_local_produce: 'Local Produce',
    // Relationship Types
    relationship_stranger: 'Stranger',
    relationship_acquaintance: 'Acquaintance',
    relationship_friend: 'Friend',
    relationship_rival: 'Rival',
    relationship_partner: 'Partner',
    relationship_spouse: 'Spouse',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages & Roles
    lifeStage_child: 'Child',
    lifeStage_adolescent: 'Adolescent',
    lifeStage_adult: 'Adult',
    lifeStage_elder: 'Elder',
    role_worker: 'Worker',
    role_healer: 'Healer',
    role_scientist: 'Scientist',
    role_leader: 'Leader',
    role_trader: 'Trader',
    role_crafter: 'Crafter',
    role_guard: 'Guard',
    role_counselor: 'Counselor',
    role_entrepreneur: 'Entrepreneur',
    role_none: 'None',
    // Cultures & Religions
    culture_none: 'None',
    religion_none: 'None',
    // ControlPanel.tsx
    controlPanel_step: 'Step',
    controlPanel_run: 'Run',
    controlPanel_reset: 'Reset',
    controlPanel_generateWorld: 'Generate World',
    controlPanel_addWithAI: 'Add with AI',
    // CreateObjectPanel.tsx
    create_createNew: 'Create New',
    create_agent: 'Agent',
    create_entity: 'Entity',
    create_action: 'Action',
    create_name: 'Name',
    create_description: 'Description',
    create_beliefsPlaceholder: 'Beliefs (JSON format e.g. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief Key (optional)',
    create_genome_placeholder: 'Genes (e.g. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Generate random genes',
    create_generate_random_name: 'Generate random name',
    create_generate_random_description: 'Generate random description',
    create_generate_random_beliefs: 'Generate random beliefs',
    create_create: 'Create',
    create_invalidJson: 'Invalid JSON for beliefs. Please use {"key": value} format.',
    create_role_label: 'Role:',
    create_randomize_personality: 'Randomize Personality',
    create_mechanical_effects: 'Mechanical Effects (Optional)',
    create_costs_placeholder: 'Costs (JSON, e.g. {"wood": 5})',
    create_stat_changes_label: 'Stat Changes (Deltas)',
    create_skill_gain_label: 'Skill Gain',
    stat_health: 'Health',
    stat_hunger: 'Hunger',
    stat_thirst: 'Thirst',
    stat_fatigue: 'Fatigue',
    stat_stress: 'Stress',
    stat_currency: 'Currency',
    create_skill_to_gain: 'Skill',
    create_amount: 'Amount',
    // LogPanel.tsx
    logPanel_eventLog: 'Event Log',
    // WorldGraph.tsx
    worldGraph_title: 'World Map',
    // ExporterPanel.tsx
    stateManagement_title: 'Save & Load State',
    stateManagement_save: 'Save Full State',
    stateManagement_load: 'Load Full State',
    stateManagement_advanced: 'Advanced Export Options',
    export_env: 'Export Environment Only',
    export_agents: 'Export Agents Only',
    export_entities: 'Export Entities Only',
    export_conversations: 'Export All Conversations (.md)',
    export_statistics: 'Export Statistics',
    export_journal_button: 'Download Journal',
    // AdminPanel.tsx
    admin_title: 'Admin Control Panel',
    admin_politicalManagement: 'Political Management',
    admin_currentLeader: 'Current Leader',
    admin_startElection: 'Start Election',
    admin_setLeader: 'Set Leader',
    admin_selectAgent: 'Select an Agent',
    admin_laws: 'Laws',
    admin_addLaw: 'Add Law',
    admin_lawName: 'Law Name',
    admin_violatingAction: 'Violating Action Name',
    admin_techManagement: 'Technology Management',
    admin_researchPoints: 'Research Points',
    admin_unlock: 'Unlock',
    admin_envOverride: 'Environment Override',
    admin_updateEnv: 'Update Environment',
    admin_ruleEditor: 'World Rule Editor',
    admin_createAction: 'Create New Action',
    admin_createActionBtn: 'Create Action',
    admin_existingActions: 'Existing Actions',
    admin_agentManagement: 'Agent Management',
    admin_resurrect: 'Resurrect',
    admin_set: 'Set',
    admin_sicknessPlaceholder: 'None',
    admin_imprison: 'Imprison',
    admin_imprisonDuration: 'Duration (steps)',
    // Election
    election_title: 'Election',
    election_status_active: 'Active until step {endDate}',
    election_status_inactive: 'Inactive',
    election_status_none: 'No election',
    // View Toggles
    viewtoggle_left: 'Toggle Left Panel',
    viewtoggle_agentcard: 'Toggle Agent Card',
    viewtoggle_map: 'Toggle World Map',
    viewtoggle_right: 'Toggle Right Panel',
    // Analytics Dashboard
    analytics_title: 'Advanced Analytics',
    analytics_tab_social: 'Social Network',
    analytics_tab_economic: 'Economic Flow',
    analytics_tab_cultural: 'Cultural Spread',
    analytics_tab_tech: 'Technology',
    analytics_time_window: 'Time Window (Steps)',
    analytics_social_no_relations: 'No significant relationships to display.',
    analytics_eco_no_transactions: 'No economic transactions in the selected time window.',
    analytics_tech_progress: 'Research Progress',
    // Statistics Report
    stats_report_title: 'Statistics Report',
    stats_marriages: 'Marriages',
    stats_births: 'Births',
    stats_imprisonments: 'Imprisonments',
    stats_fights: 'Fights',
    // AI Prompts
    reason_for_imprisonment_unknown: "You are not entirely sure what specific event led to your arrest, which is confusing and frustrating.",
    // Action Logs
    log_action_eat: 'üçé {agentName} eats some food, reducing their hunger.',
    log_action_eat_no_food: '{agentName} wants to eat, but has no food in their inventory.',
    log_action_drink: 'üíß {agentName} drinks from {sourceName}, quenching their thirst.',
    log_action_drink_no_source: '{agentName} is thirsty, but cannot find a water source nearby.',
    log_action_gather_food: 'üß∫ {agentName} gathers {amount} food from {sourceName}.',
    log_action_gather_food_no_source: '{agentName} looks for food, but finds no sources nearby.',
    log_action_gather_fail_private: '{agentName} tries to gather from {resourceName}, but it is privately owned.',
    log_action_gather_wood: 'ü™µ {agentName} gathers {amount} wood from {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} looks for wood, but finds no sources nearby.',
    log_action_build_shelter: 'üè° {agentName} uses 10 wood to build a small shelter.',
    log_action_build_shelter_no_wood: '{agentName} wants to build a shelter but needs {woodCost} wood.',
    log_action_move_towards_resource: '{agentName} moves towards {resourceName}.',
    log_action_move_towards_agent: '{agentName} moves towards {targetName}.',
    log_action_move: '{agentName} moves {direction} to ({x}, {y}).',
    log_action_custom: 'Custom action "{actionName}" executed by {agentName}.',
    log_action_fight: 'üí• {agentName1} and {agentName2} got into a fight!',
    log_action_steal_success: '‚úã {stealer} stole 1 {item} from {victim}!',
    log_action_steal_fail: ' botched a theft attempt on {victim} and was caught!',
    log_action_steal_no_target: '{agentName} looked for someone to steal from, but found no suitable targets.',
    log_action_rest: 'üí§ {agentName} rests and recovers health to {newHealth}.',
    log_action_rest_and_cured: 'üí§ {agentName} rests, recovers, and feels their {sickness} subsiding!',
    log_action_talk: 'üí¨ {speakerName} says to {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wanted to talk, but no one was nearby.',
    log_action_talk_failed: '{agentName} tried to start a conversation, but got lost in thought.',
    log_survival_starving: '‚ÄºÔ∏è {agentName} is starving and losing health!',
    log_survival_dehydrated: '‚ÄºÔ∏è {agentName} is dehydrated and losing health!',
    log_survival_sickness: 'ü§¢ {agentName} is suffering from {sickness} and loses health.',
    log_survival_succumbed_needs: 'üíÄ {agentName} has succumbed to hunger or thirst.',
    log_execution_deceased: '{agentName} cannot execute actions as they are deceased.',
    log_execution_actionNotFound: '{agentName} could not find a matching action for prompt: "{prompt}"',
    log_execution_imprisoned: '{agentName} cannot perform actions while imprisoned.',
    log_action_fail_role: '{agentName} cannot perform this action, requires role: {requiredRole}.',
    log_action_work_for_money: 'üí∞ {agentName} works for a day, earning {amount}$.',
    log_action_found_company_success: 'üè¢ {agentName} founded a company by buying the property "{resourceName}" for {cost}$ and became an entrepreneur!',
    log_action_found_company_fail_funds: '{agentName} wants to found a company, but cannot afford the {cost}$ price.',
    log_action_found_company_fail_none: '{agentName} looked for property to buy to found a company, but none was available.',
    log_action_work_for_company_success: 'üíº {agentName} worked at {resourceName} for {ownerName} and earned {wage}$!',
    log_action_work_for_company_fail_none: '{agentName} looked for work, but no companies were hiring nearby.',
    log_action_work_for_company_fail_no_owner: '{agentName} tried to work, but the owner could not be found.',
    log_action_work_for_company_fail_owner_broke: "{agentName} wanted to work for {ownerName}, but they couldn't afford the wage.",
    log_action_work_for_company_fail_no_resources: "{agentName} tried to work at {resourceName}, but it has been depleted.",
    log_action_mine_iron: '‚õèÔ∏è {agentName} mines {amount} iron from {sourceName}.',
    log_action_mine_iron_no_source: '{agentName} looks for iron, but finds no sources nearby.',
    log_action_craft_success: 'üõ†Ô∏è {agentName} successfully crafted a {itemName}.',
    log_action_craft_fail_ingredients: '{agentName} tried to craft a {itemName} but lacked ingredients.',
    log_action_craft_fail_skill: '{agentName} lacks the skill ({skill} {level}) to craft.',
    log_action_craft_fail_tech: '{agentName} lacks the technology ({tech}) to craft.',
    log_action_market_list_item: 'üìà {agentName} listed 1 {item} on the market for a system price of {price}$.',
    log_action_market_buy_item: 'üõí {agentName} bought 1 {item} from {sellerName} for {price}$.',
    log_action_market_too_far: '{agentName} is too far from the marketplace to trade.',
    log_action_market_no_items: '{agentName} went to the market but has nothing to sell.',
    log_action_market_is_empty: '{agentName} visited the market, but it was empty.',
    log_action_market_cannot_afford: '{agentName} could not afford any items at the market.',
    log_law_violation: '‚öñÔ∏è {agentName} violated the "{lawName}" law and was fined {punishment}$.',
    log_law_violation_arrest: '‚öñÔ∏è Guard {guardName} witnessed {criminalName} breaking the law and arrested them!',
    log_action_arrest_success: '‚õìÔ∏è {guardName} arrested {criminalName} and sent them to jail.',
    log_action_release_from_jail: '{agentName} has served their time and is released from jail.',
    log_action_patrol: 'üõ°Ô∏è Guard {agentName} is patrolling the area.',
    log_election_started: 'üó≥Ô∏è An election for a new leader has begun!',
    log_election_winner: 'üèÜ {winnerName} has won the election with {votes} votes and is the new leader!',
    log_election_no_winner: 'The election ended with no winner. {oldLeaderName} remains in power.',
    log_action_vote_cast: '{agentName} voted for {candidateName}.',
    log_action_vote_no_election: '{agentName} wants to vote, but there is no active election.',
    log_action_vote_no_candidates: '{agentName} wants to vote, but there are no candidates.',
    log_action_vote_undecided: '{agentName} could not decide who to vote for.',
    log_action_run_for_election_success: '{agentName} has announced their candidacy for leader!',
    log_action_run_for_election_no_election: '{agentName} wants to run, but there is no active election.',
    log_action_run_for_election_already_running: '{agentName} is already running for leader.',
    log_action_run_for_election_low_status: '{agentName} lacks the social status to run for leader.',
    log_action_enact_law_success: 'üìú Leader {agentName} has enacted a new law: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} tried to enact a law, but is not the leader.',
    log_action_enact_law_exists: 'Leader {agentName} tried to enact law "{lawName}", but it already exists.',
    log_tech_unlocked: 'üí° The {cultureName} culture has discovered {techName}!',
    log_leader_unlocks_governance: 'üëë As {leaderName} becomes leader, their culture, {cultureName}, gains insight into Governance!',
    log_action_research: 'üî¨ Scientist {agentName} contributes {points} points to their culture\'s research.',
    log_action_research_no_culture: '{agentName} cannot research without a culture.',
    log_action_share_knowledge: 'ü§ù {agentName1} and {agentName2} share insights, boosting research.',
    log_action_share_knowledge_no_one: '{agentName} looked for another scientist to collaborate with, but found none.',
    log_action_wander_thoughtfully: '{agentName} wanders thoughtfully.',
    log_goal_generated: 'üí° {agentName} has a new goal: {goalDescription}',
    log_promotion: 'üéâ {agentName} has been promoted to a new role: {newRole}!',
    log_action_propose_marriage_success: 'üíç {agentName} proposes to {targetName}!',
    log_action_propose_marriage_fail: '{targetName} is not interested in {agentName}\'s proposal.',
    log_action_propose_no_one_suitable: '{agentName} wants to propose, but finds no one suitable nearby.',
    log_action_propose_fail_already_married: '{agentName} tried to propose, but is already married.',
    log_action_accept_proposal_success: 'üíí {agentName} accepts {targetName}\'s proposal! They are now married.',
    log_action_accept_proposal_none: '{agentName} has no pending proposals to accept.',
    log_action_reproduce_success: '‚ù§Ô∏è Congratulations! {agentName} and {partnerName} are having a child!',
    log_action_reproduce_fail: '{agentName} and {partnerName} tried to have a child, but it was not the right time.',
    log_action_reproduce_fail_age: '{agentName} (or partner {partnerName}) is not in the right age range to have children.',
    log_action_reproduce_fail_max_offspring: '{agentName} and {partnerName} have already reached the maximum number of children.',
    log_action_reproduce_no_partner: '{agentName} wants a child, but has no partner or is not near them.',
    log_action_insemination_success: 'üî¨ Science prevails! {agentName} successfully conceived a child through artificial insemination.',
    log_action_insemination_fail: 'üî¨ The artificial insemination procedure for {agentName} failed.',
    log_action_insemination_fail_funds: '{agentName} cannot afford the {cost}$ for artificial insemination.',
    log_new_child: 'üë∂ A new child, {childName}, was born to {parent1Name} and {parent2Name}.',
    log_action_mentor_success: 'üéì {mentorName} successfully mentors {studentName} in the skill of {skill}.',
    log_action_mentor_fail_skill: '{agentName} wanted to mentor, but lacks sufficient expertise.',
    log_action_mentor_no_one: '{agentName} looked for a young agent to mentor, but found no one suitable.',
    log_action_seek_counseling: '{agentName} is seeking counseling from {counselorName}.',
    log_action_seek_counseling_fail: '{agentName} wanted to seek counseling, but no counselors are available.',
    log_action_provide_counseling_success: 'üõãÔ∏è Counselor {counselorName} provides a helpful session to {patientName}, reducing their stress.',
    log_action_provide_counseling_fail: '{agentName} looked for someone to counsel, but found no one in need.',
    log_action_meditate: 'üßò {agentName} meditates, finding a moment of peace.',
    log_action_meditate_inspiration: 'üí° {agentName} has an epiphany while meditating!',
    log_action_mourn: 'üñ§ {agentName} takes a moment to mourn.',
    log_action_forgive_no_rival: '{agentName} considered offering forgiveness, but has no one to forgive.',
    log_action_forgive_success: 'üïäÔ∏è {agentName} forgave {rivalName}, ending their rivalry.',
    log_action_confront_no_partner: '{agentName} feels jealous but has no partner to confront.',
    log_action_confront_success: 'üò† {agentName} confronts {partnerName} out of jealousy, increasing tension.',
    log_action_invent_success: 'üî¨ Eureka! {agentName} has invented a new technology: {techName}!',
    log_action_invent_fail_role: '{agentName} tried to invent, but lacks the scientific mindset.',
    log_action_invent_fail_no_basis: '{agentName} lacks a foundational technology to build upon for new inventions.',
    log_action_invent_fail_ai: '{agentName} tried to invent, but inspiration failed them.',
    personality_title: 'Personality Traits',
    personality_openness: 'Openness',
    personality_conscientiousness: 'Conscientiousness',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Agreeableness',
    personality_neuroticism: 'Neuroticism',
    psyche_empathy: 'Empathy',
    psyche_vengefulness: 'Vengefulness',
    psyche_forgiveness: 'Forgiveness',
    psyche_searchForMeaning: 'Search for Meaning',
    psyche_decisionPressure: 'Decision Pressure',
    psyche_fearOfDeath: 'Fear of Death',
    psyche_boredom: 'Boredom',
    psyche_inspiration: 'Inspiration',
    psyche_fanaticism: 'Fanaticism',
    psyche_spiritualNeed: 'Spiritual Need',
    psyche_jealousy: 'Jealousy',
    emotion_shame: 'Shame',
    emotion_pride: 'Pride',
    emotion_grief: 'Grief',
    skill_healing: 'Healing',
    skill_woodcutting: 'Woodcutting',
    skill_rhetoric: 'Rhetoric',
    skill_combat: 'Combat',
    skill_construction: 'Construction',
    skill_farming: 'Farming',
    skill_mining: 'Mining',
    skill_crafting: 'Crafting',
    skill_trading: 'Trading',
    goal_becomeLeader: 'Become Leader',
    goal_buildLargeHouse: 'Build a House',
    goal_masterSkill: 'Master a Skill',
    goal_avengeRival: 'Avenge Rival',
    goal_achieveWealth: 'Achieve Wealth',
    goal_mentorYoungAgent: 'Mentor a Young Agent',
    goal_seekCounseling: 'Seek Counseling',
    goal_findMeaning: 'Find Meaning',
    goal_forgiveRival: 'Forgive Rival',
    goal_expressGrief: 'Express Grief',
    tech_agriculture: 'Agriculture',
    tech_metallurgy: 'Metallurgy',
    tech_writing: 'Writing',
    tech_chemistry: 'Chemistry',
    tech_governance: 'Governance',
    tech_bioengineering: 'Bioengineering',
  },
  de: {
    // App.tsx
    realitySimAI: 'RealitySim KI',
    agents: 'Agenten',
    deceased: 'Verstorben',
    entities: 'Entit√§ten',
    environment: 'Umgebung',
    availableActions: 'Verf√ºgbare Aktionen',
    agentCard_selectAgent: 'W√§hle einen Agenten aus, um Details anzuzeigen.',
    confirmDelete: 'M√∂chtest du diesen {type} wirklich l√∂schen? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.',
    type_agent: 'Agent',
    type_entity: 'Entit√§t',
    type_action: 'Aktion',
    processingSteps: 'Verarbeite Schritt(e)...',
    // Logs
    log_simulationInitialized: 'Simulation initialisiert.',
    log_simulationStepped: 'Simulation einen Schritt weiter.',
    log_simulationRanSteps: 'Simulation lief f√ºr {steps} Schritte.',
    log_simulationReset: 'Simulation auf Anfangszustand zur√ºckgesetzt.',
    log_agentProcessingPrompt: 'Agent {agentId} verarbeitet Befehl: "{prompt}" (mit {aiInfo})',
    log_aiSuggestedAction: 'KI schlug Aktion vor: "{action}"',
    log_aiFailed: 'KI konnte keine passende Aktion finden. Keine Aktion ausgef√ºhrt.',
    log_aiError: 'Fehler bei der KI-API: {error}',
    error_lmStudio_cors: 'Verbindung zu LM Studio fehlgeschlagen. Dies ist normalerweise ein Cross-Origin Resource Sharing (CORS) Problem. Bitte √ºberpr√ºfe Folgendes in deiner LM Studio Anwendung: 1. Gehe zum "Local Server" Tab. 2. Stelle sicher, dass der Server "Running" ist. 3. **Wichtig: Finde die "CORS" Option und stelle sicher, dass sie aktiviert ist.** 4. √úberpr√ºfe, ob die URL in den Einstellungen dieser App mit der in LM Studio angezeigten √ºbereinstimmt.',
    error_lmStudio_url_invalid: "Ung√ºltiges LM Studio URL-Format. Bitte gib eine g√ºltige Basis-URL wie 'http://localhost:1234' an.",
    error_gemini_no_key: 'Google Gemini API-Schl√ºssel nicht in Umgebungsvariablen gefunden. Bitte sicherstellen, dass er gesetzt ist.',
    log_createdAgent: 'Neuer Agent erstellt: {name}',
    log_createdEntity: 'Neue Entit√§t erstellt: {name}',
    log_createdAction: 'Neue Aktion erstellt: {name}',
    log_removed: '{type} entfernt: {name}',
    log_adminSetHealth: "Admin hat die Gesundheit von {name} auf {health} gesetzt.",
    log_adminSetPosition: "Admin hat die Position von {name} auf ({x}, {y}) gesetzt.",
    log_adminInflictedSickness: "Admin hat {name} mit {sickness} infiziert.",
    log_adminCured: 'Admin hat {name} geheilt.',
    log_adminResurrected: 'Admin hat {name} wiederbelebt.',
    log_adminModifiedEnv: 'Admin hat die Umgebung direkt modifiziert.',
    log_exported: 'Teil-Daten exportiert: {type}.',
    log_stateSaved: 'Simulationszustand in Datei gespeichert.',
    log_stateLoaded: 'Simulationszustand erfolgreich aus Datei geladen.',
    log_loadError: 'Fehler beim Laden des Zustands aus Datei: {error}',
    log_runningSimulation: 'F√ºhre Simulation f√ºr {steps} Schritte aus...',
    log_generating: 'Generiere...',
    log_generatingWorld: 'Generiere Welt...',
    log_worldGenerated: 'Neue Welt erfolgreich verarbeitet.',
    log_worldGenerated_warning: '‚ö†Ô∏è KI hat {genAgents}/{reqAgents} Agenten und {genEntities}/{reqEntities} Entit√§ten generiert. Fahre mit generierten Ergebnissen fort.',
    log_generatingAgents: 'Generiere {count} neue Agenten...',
    log_generatingEntities: 'Generiere {count} neue Entit√§ten...',
    log_addedAgents: '{count} neue Agenten zur Welt hinzugef√ºgt.',
    log_addedEntities: '{count} neue Entit√§ten zur Welt hinzugef√ºgt.',
    log_configure_ai_full: 'KI-Anbieter nicht konfiguriert. Bitte √∂ffne die Einstellungen, um einen KI-Anbieter auszuw√§hlen und zu konfigurieren.',
    log_adminSetCurrency: "Admin hat die W√§hrung von {name} auf {currency}$ gesetzt.",
    log_adminRepealedLaw: "Admin hat das Gesetz aufgehoben: {lawName}.",
    log_adminSetLeader: "Admin hat {name} zum neuen Anf√ºhrer ernannt.",
    log_adminUnlockedTech: "Admin hat Technologie \"{techId}\" f√ºr {cultureName} freigeschaltet.",
    log_adminImprisoned: "Admin hat {name} f√ºr {duration} Schritte inhaftiert.",
    log_psychoanalysis_applied: 'üß¨ Psychoanalyse-Ergebnisse wurden in die Psyche von {agentName} integriert.',
    log_grief: 'üíî {agentName} wird von Trauer √ºber den Tod von {deceasedName} erfasst.',
    log_sickness_spread: '‚ò£Ô∏è {infectedName} hat sich bei {sourceName} mit {sickness} angesteckt!',
    log_action_custom_success: '{agentName} hat die benutzerdefinierte Aktion erfolgreich ausgef√ºhrt: "{actionName}".',
    log_action_custom_fail_cost: '{agentName} versuchte, "{actionName}" auszuf√ºhren, aber es fehlten {amount} {item}.',
    // Settings
    settings_title: 'Einstellungen',
    settings_aiProvider_label: 'KI-Anbieter',
    settings_lmStudioUrl_label: 'LM Studio API-Endpunkt',
    settings_lmStudioUrl_description: 'Gib die Basis-URL von deinem lokalen LM Studio Server ein (z.B. http://localhost:1234). Der API-Pfad wird automatisch hinzugef√ºgt.',
    settings_lmStudioModel_label: 'Modellname',
    settings_lmStudioModel_description: 'Gib den API-Identifier des Modells aus LM Studio f√ºr Chat-Antworten ein (z.B. google/gemma-2b-it). Dieses Modell muss auf dem Server geladen sein.',
    settings_lmStudioEmbeddingModel_label: 'Embedding-Modellname (optional)',
    settings_lmStudioEmbeddingModel_description: 'Gib den Modell-Identifier f√ºr Embeddings ein. Wenn leer, wird das Chat-Modell verwendet. Dieses Modell muss auf deinem LM Studio Server geladen und f√ºr den Embedding-Endpunkt ausgew√§hlt sein.',
    settings_geminiModel_label: 'Gemini-Modell',
    settings_geminiModel_description: 'W√§hle das zu verwendende Google Gemini Modell.',
    settings_geminiApiKey_label: 'Gemini API-Schl√ºssel',
    settings_geminiApiKey_value: 'Geladen aus Umgebungsvariable',
    settings_geminiApiKey_description: 'Dein Google AI API-Schl√ºssel muss als Umgebungsvariable mit dem Namen API_KEY verf√ºgbar sein.',
    settings_save: 'Speichern',
    settings_cancel: 'Abbrechen',
    // Generate World Modal
    generateWorldModal_title: 'Neue Welt generieren',
    generateWorldModal_agentsLabel: 'Anzahl der Agenten',
    generateWorldModal_agentsDescription: 'Wie viele Agenten sollen die neue Welt bev√∂lkern?',
    generateWorldModal_entitiesLabel: 'Entit√§ten',
    generateWorldModal_entitiesDescription: 'Gib an, wie viele von jedem Entit√§tstyp in der neuen Welt existieren sollen. Marktplatz und Gef√§ngnis werden in der Anzahl der Geb√§ude ber√ºcksichtigt.',
    generateWorldModal_generate: 'Generieren',
    // Generate Content Modal
    generateContent_title: 'Inhalte mit KI generieren',
    generateContent_addAgents: 'Neue Agenten hinzuf√ºgen',
    generateContent_addEntities: 'Neue Entit√§ten hinzuf√ºgen',
    generateContent_agentsLabel: 'Anzahl neuer Agenten',
    generateContent_agentsDescription: 'Wie viele neue Agenten sollen generiert und zur Welt hinzugef√ºgt werden?',
    generateContent_entitiesLabel: 'Anzahl neuer Entit√§ten',
    generateContent_entitiesDescription: 'Wie viele neue Entit√§ten/Ressourcen sollen generiert und zur Welt hinzugef√ºgt werden?',
    generateContent_generateAgentsBtn: 'Agenten generieren',
    generateContent_generateEntitiesBtn: 'Entit√§ten generieren',
    generateContent_foodSources: 'Nahrungsquellen',
    generateContent_waterSources: 'Wasserquellen',
    generateContent_woodSources: 'Holzquellen',
    generateContent_ironSources: 'Eisenquellen',
    generateContent_buildings: 'Geb√§ude/Objekte',
    generateContent_entitiesDescriptionCategorized: 'Gib an, wie viele von jedem Entit√§tstyp generiert und zur Welt hinzugef√ºgt werden sollen.',
    // AgentCard.tsx
    agentCard_statusAndNeeds: 'Status & Bed√ºrfnisse',
    agentCard_age: 'Alter',
    agentCard_culture: 'Kultur',
    agentCard_religion: 'Religion',
    agentCard_role: 'Rolle',
    world_leader: 'Aktueller Anf√ºhrer',
    agentCard_lifeStage: 'Lebensphase',
    agentCard_health: 'Gesundheit',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Durst',
    agentCard_fatigue: 'M√ºdigkeit',
    agentCard_sickness: 'Krankheit',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Sozialstatus',
    agentCard_currency: 'W√§hrung',
    agentCard_healthy: 'Gesund',
    agentCard_deceased: 'VERSTORBEN',
    agentCard_imprisoned: 'INHAFTIERT',
    agentCard_release_at: 'Freilassung bei Schritt:',
    agentCard_beliefs: '√úberzeugungen',
    agentCard_emotions: 'Situative Emotionen',
    agentCard_interact: 'Interagieren',
    agentCard_promptPlaceholder: 'Befehl f√ºr {name} (KI interpretiert)...',
    agentCard_promptPlaceholderRaw: 'Exakten Aktionsnamen eingeben...',
    agentCard_promptPlaceholderDeceased: '{name} kann nicht antworten.',
    agentCard_useAi: 'KI verwenden',
    agentCard_noBeliefs: 'Keine √úberzeugungen',
    agentCard_noEmotions: 'Keine Emotionen',
    agentCard_relationships: 'Beziehungen',
    agentCard_noRelationships: 'Keine Beziehungen etabliert.',
    agentCard_inventory: 'Inventar',
    agentCard_noInventory: 'Inventar ist leer.',
    agentCard_personality: 'Pers√∂nlichkeit',
    agentCard_skills: 'F√§higkeiten',
    agentCard_goals: 'Aktive Ziele',
    agentCard_noGoals: 'Keine aktiven Ziele.',
    agentCard_trauma: 'Traumata',
    agentCard_noTrauma: 'Keine Traumata verzeichnet.',
    agentCard_tech: 'Bekannte Technologien',
    agentCard_noTech: 'Keine Technologien bekannt.',
    agentCard_noData: 'Keine Daten.',
    agentCard_genome: 'Genom & Merkmale',
    agentCard_noGenome: 'Keine nennenswerten genetischen Merkmale.',
    agentCard_property: 'Eigentum',
    agentCard_noProperty: 'Besitzt kein Eigentum.',
    agentCard_longTermMemory: 'Langzeitged√§chtnis',
    agentCard_noMemories: 'Keine Erinnerungen aufgezeichnet.',
    agentCard_family: 'Familie',
    agentCard_child_relation: 'Kind',
    agentCard_no_children: 'Keine Kinder.',
    agentCard_jailJournal: 'Gef√§ngnistagebuch',
    agentCard_noJournalEntries: 'Noch keine Tagebucheintr√§ge.',
    // Psychoanalysis
    psychoanalysis_title: 'Psychologisches Profil',
    psyche_title: 'Psyche & Triebe',
    psychoanalysis_generate_button: 'Psychologisches Profil ansehen',
    psychoanalysis_generating: 'Generiere Profil...',
    report_psychodynamik: 'Psychodynamik',
    report_persoenlichkeitsbild: 'Pers√∂nlichkeitsbild',
    report_beziehungsdynamik: 'Beziehungsdynamik',
    report_trauma: 'Traumatische Spuren oder psychische Belastung',
    report_kultur: 'Kulturelle & spirituelle Verarbeitung',
    report_projektionen: 'Projektionen oder Verschiebungen',
    report_empfehlung: 'Therapeutische Empfehlung',
    // Genes
    'gene_G-RESISTANT': 'Resistent',
    'gene_G-AGILE': 'Agil',
    'gene_G-SOCIAL': 'Sozial',
    'gene_G-LONGEVITY': 'Langlebigkeit',
    'gene_G-FASTHEAL': 'Schnellheilung',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_G-FERTILE': 'Fruchtbar',
    'gene_desc_G-RESISTANT': 'Reduziert Gesundheitsverlust durch Krankheit und erh√∂ht die Heilungschance.',
    'gene_desc_G-AGILE': 'Bewegt sich schneller (2 Schritte statt 1).',
    'gene_desc_G-SOCIAL': 'Initiert eher Gespr√§che.',
    'gene_desc_G-LONGEVITY': 'Reduziert Gesundheitsverlust durch hohes Alter.',
    'gene_desc_G-FASTHEAL': 'Stellt mehr Gesundheit beim Ausruhen wieder her.',
    'gene_desc_G-INTELLIGENT': 'Lernt F√§higkeiten und Forschungspunkte schneller.',
    'gene_desc_G-FERTILE': 'Erh√∂hte Chance auf erfolgreiche Fortpflanzung.',
    // Resource & Item Types
    resource_food: 'Nahrung',
    resource_water: 'Wasser',
    resource_wood: 'Holz',
    resource_medicine: 'Medizin',
    resource_iron: 'Eisen',
    item_food: 'Nahrung',
    item_water: 'Wasser',
    item_wood: 'Holz',
    item_medicine: 'Medizin',
    item_iron: 'Eisen',
    item_sword: 'Schwert',
    item_plow: 'Pflug',
    item_advanced_medicine: 'Fortschrittliche Medizin',
    item_iron_ingot: 'Eisenbarren',
    item_local_produce: 'Lokale Produkte',
    // Relationship Types
    relationship_stranger: 'Fremder',
    relationship_acquaintance: 'Bekannter',
    relationship_friend: 'Freund',
    relationship_rival: 'Rivale',
    relationship_partner: 'Partner',
    relationship_spouse: 'Ehepartner',
    'relationship_ex-partner': 'Ex-Partner',
    // Life Stages & Roles
    lifeStage_child: 'Kind',
    lifeStage_adolescent: 'Jugendlicher',
    lifeStage_adult: 'Erwachsener',
    lifeStage_elder: '√Ñltester',
    role_worker: 'Arbeiter',
    role_healer: 'Heiler',
    role_scientist: 'Wissenschaftler',
    role_leader: 'Anf√ºhrer',
    role_trader: 'H√§ndler',
    role_crafter: 'Handwerker',
    role_guard: 'Wache',
    role_counselor: 'Berater',
    role_entrepreneur: 'Unternehmer',
    role_none: 'Keine',
    // Cultures & Religions
    culture_none: 'Keine',
    religion_none: 'Keine',
    // ControlPanel.tsx
    controlPanel_step: 'Schritt',
    controlPanel_run: 'Laufen',
    controlPanel_reset: 'Zur√ºcksetzen',
    controlPanel_generateWorld: 'Welt generieren',
    controlPanel_addWithAI: 'Mit KI hinzuf√ºgen',
    // CreateObjectPanel.tsx
    create_createNew: 'Neu erstellen',
    create_agent: 'Agent',
    create_entity: 'Entit√§t',
    create_action: 'Aktion',
    create_name: 'Name',
    create_description: 'Beschreibung',
    create_beliefsPlaceholder: '√úberzeugungen (JSON-Format z.B. {"key":0.5})',
    create_beliefKeyPlaceholder: 'Belief Key (optional)',
    create_genome_placeholder: 'Gene (z.B. G-AGILE, G-SOCIAL)',
    create_generate_genes_title: 'Zuf√§llige Gene generieren',
    create_generate_random_name: 'Zuf√§lligen Namen generieren',
    create_generate_random_description: 'Zuf√§llige Beschreibung generieren',
    create_generate_random_beliefs: 'Zuf√§llige √úberzeugungen generieren',
    create_create: 'Erstellen',
    create_invalidJson: 'Ung√ºltiges JSON f√ºr √úberzeugungen. Bitte Format {"key": value} verwenden.',
    create_role_label: 'Rolle:',
    create_randomize_personality: 'Zuf√§llige Pers√∂nlichkeit',
    create_mechanical_effects: 'Mechanische Auswirkungen (Optional)',
    create_costs_placeholder: 'Kosten (JSON, z.B. {"wood": 5})',
    create_stat_changes_label: 'Status-√Ñnderungen (Deltas)',
    create_skill_gain_label: 'F√§higkeits-Gewinn',
    stat_health: 'Gesundheit',
    stat_hunger: 'Hunger',
    stat_thirst: 'Durst',
    stat_fatigue: 'M√ºdigkeit',
    stat_stress: 'Stress',
    stat_currency: 'W√§hrung',
    create_skill_to_gain: 'F√§higkeit',
    create_amount: 'Menge',
    // LogPanel.tsx
    logPanel_eventLog: 'Ereignisprotokoll',
    // WorldGraph.tsx
    worldGraph_title: 'Weltkarte',
    // ExporterPanel.tsx
    stateManagement_title: 'Zustand speichern & laden',
    stateManagement_save: 'Ganzen Zustand speichern',
    stateManagement_load: 'Ganzen Zustand laden',
    stateManagement_advanced: 'Erweiterte Exportoptionen',
    export_env: 'Nur Umgebung exportieren',
    export_agents: 'Nur Agenten exportieren',
    export_entities: 'Nur Entit√§ten exportieren',
    export_conversations: 'Alle Gespr√§che exportieren (.md)',
    export_statistics: 'Statistiken exportieren',
    export_journal_button: 'Tagebuch herunterladen',
    // AdminPanel.tsx
    admin_title: 'Admin-Kontrollpanel',
    admin_politicalManagement: 'Politische Verwaltung',
    admin_currentLeader: 'Aktueller Anf√ºhrer',
    admin_startElection: 'Wahl starten',
    admin_setLeader: 'Anf√ºhrer setzen',
    admin_selectAgent: 'Agent ausw√§hlen',
    admin_laws: 'Gesetze',
    admin_addLaw: 'Gesetz hinzuf√ºgen',
    admin_lawName: 'Gesetzname',
    admin_violatingAction: 'Verletzende Aktion',
    admin_techManagement: 'Technologieverwaltung',
    admin_researchPoints: 'Forschungspunkte',
    admin_unlock: 'Freischalten',
    admin_envOverride: 'Umgebung √ºberschreiben',
    admin_updateEnv: 'Umgebung aktualisieren',
    admin_ruleEditor: 'Weltregel-Editor',
    admin_createAction: 'Neue Aktion erstellen',
    admin_createActionBtn: 'Aktion erstellen',
    admin_existingActions: 'Bestehende Aktionen',
    admin_agentManagement: 'Agentenverwaltung',
    admin_resurrect: 'Wiederbeleben',
    admin_set: 'Setzen',
    admin_sicknessPlaceholder: 'Keine',
    admin_imprison: 'Inhaftieren',
    admin_imprisonDuration: 'Dauer (Schritte)',
    // Election
    election_title: 'Wahl',
    election_status_active: 'Aktiv bis Schritt {endDate}',
    election_status_inactive: 'Inaktiv',
    election_status_none: 'Keine Wahl',
    // View Toggles
    viewtoggle_left: 'Linkes Panel umschalten',
    viewtoggle_agentcard: 'Agentenkarte umschalten',
    viewtoggle_map: 'Weltkarte umschalten',
    viewtoggle_right: 'Rechtes Panel umschalten',
    // Analytics Dashboard
    analytics_title: 'Erweiterte Analyse',
    analytics_tab_social: 'Soziales Netzwerk',
    analytics_tab_economic: 'Wirtschaftsfl√ºsse',
    analytics_tab_cultural: 'Kulturelle Ausbreitung',
    analytics_tab_tech: 'Technologie',
    analytics_time_window: 'Zeitfenster (Schritte)',
    analytics_social_no_relations: 'Keine signifikanten Beziehungen zum Anzeigen.',
    analytics_eco_no_transactions: 'Keine wirtschaftlichen Transaktionen im ausgew√§hlten Zeitfenster.',
    analytics_tech_progress: 'Forschungsfortschritt',
    // Statistics Report
    stats_report_title: 'Statistik-Bericht',
    stats_marriages: 'Eheschlie√üungen',
    stats_births: 'Geburten',
    stats_imprisonments: 'Inhaftierungen',
    stats_fights: 'K√§mpfe',
    // AI Prompts
    reason_for_imprisonment_unknown: "Du bist dir nicht ganz sicher, welches spezifische Ereignis zu deiner Verhaftung gef√ºhrt hat, was verwirrend und frustrierend ist.",
    // Action Logs
    log_action_eat: 'üçé {agentName} isst etwas und reduziert seinen Hunger.',
    log_action_eat_no_food: '{agentName} m√∂chte essen, hat aber nichts im Inventar.',
    log_action_drink: 'üíß {agentName} trinkt aus {sourceName} und l√∂scht seinen Durst.',
    log_action_drink_no_source: '{agentName} ist durstig, kann aber keine Wasserquelle in der N√§he finden.',
    log_action_gather_food: 'üß∫ {agentName} sammelt {amount} Nahrung von {sourceName}.',
    log_action_gather_food_no_source: '{agentName} sucht nach Nahrung, findet aber keine Quellen in der N√§he.',
    log_action_gather_fail_private: '{agentName} versucht, von {resourceName} zu sammeln, aber es ist in Privatbesitz.',
    log_action_gather_wood: 'ü™µ {agentName} sammelt {amount} Holz von {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} sucht nach Holz, findet aber keine Quellen in der N√§he.',
    log_action_build_shelter: 'üè° {agentName} benutzt 10 Holz, um einen kleinen Unterschlupf zu bauen.',
    log_action_build_shelter_no_wood: '{agentName} m√∂chte einen Unterschlupf bauen, ben√∂tigt aber {woodCost} Holz.',
    log_action_move_towards_resource: '{agentName} bewegt sich in Richtung {resourceName}.',
    log_action_move_towards_agent: '{agentName} bewegt sich in Richtung {targetName}.',
    log_action_move: '{agentName} bewegt sich nach {direction} zu ({x}, {y}).',
    log_action_custom: 'Benutzerdefinierte Aktion "{actionName}" von {agentName} ausgef√ºhrt.',
    log_action_fight: 'üí• {agentName1} und {agentName2} sind in einen Kampf geraten!',
    log_action_steal_success: '‚úã {stealer} hat 1 {item} von {victim} gestohlen!',
    log_action_steal_fail: ' ist bei einem Diebstahlversuch bei {victim} erwischt worden!',
    log_action_steal_no_target: '{agentName} hat nach jemandem zum Bestehlen gesucht, aber kein passendes Ziel gefunden.',
    log_action_rest: 'üí§ {agentName} ruht sich aus und stellt Gesundheit auf {newHealth} wieder her.',
    log_action_rest_and_cured: 'üí§ {agentName} ruht sich aus, erholt sich und sp√ºrt, wie seine {sickness} nachl√§sst!',
    log_action_talk: 'üí¨ {speakerName} sagt zu {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wollte reden, aber niemand war in der N√§he.',
    log_action_talk_failed: '{agentName} versuchte, ein Gespr√§ch zu beginnen, verlor sich aber in Gedanken.',
    log_survival_starving: '‚ÄºÔ∏è {agentName} verhungert und verliert Gesundheit!',
    log_survival_dehydrated: '‚ÄºÔ∏è {agentName} ist dehydriert und verliert Gesundheit!',
    log_survival_sickness: 'ü§¢ {agentName} leidet an {sickness} und verliert Gesundheit.',
    log_survival_succumbed_needs: 'üíÄ {agentName} ist Hunger oder Durst erlegen.',
    log_execution_deceased: '{agentName} kann keine Aktionen ausf√ºhren, da er verstorben ist.',
    log_execution_actionNotFound: '{agentName} konnte keine passende Aktion f√ºr den Befehl finden: "{prompt}"',
    log_execution_imprisoned: '{agentName} kann im Gef√§ngnis keine Aktionen ausf√ºhren.',
    log_action_fail_role: '{agentName} kann diese Aktion nicht ausf√ºhren, ben√∂tigt Rolle: {requiredRole}.',
    log_action_work_for_money: 'üí∞ {agentName} arbeitet einen Tag und verdient {amount}$.',
    log_action_found_company_success: 'üè¢ {agentName} hat eine Firma gegr√ºndet, indem er das Grundst√ºck "{resourceName}" f√ºr {cost}$ gekauft hat und wurde zum Unternehmer!',
    log_action_found_company_fail_funds: '{agentName} m√∂chte eine Firma gr√ºnden, kann sich aber den Preis von {cost}$ nicht leisten.',
    log_action_found_company_fail_none: '{agentName} suchte nach einem Grundst√ºck zum Kauf, um eine Firma zu gr√ºnden, aber es war keines verf√ºgbar.',
    log_action_work_for_company_success: 'üíº {agentName} hat bei {resourceName} f√ºr {ownerName} gearbeitet und {wage}$ verdient!',
    log_action_work_for_company_fail_none: '{agentName} suchte nach Arbeit, aber keine Firmen stellten in der N√§he ein.',
    log_action_work_for_company_fail_no_owner: '{agentName} versuchte zu arbeiten, aber der Besitzer konnte nicht gefunden werden.',
    log_action_work_for_company_fail_owner_broke: "{agentName} wollte f√ºr {ownerName} arbeiten, aber dieser konnte sich den Lohn nicht leisten.",
    log_action_work_for_company_fail_no_resources: "{agentName} versuchte bei {resourceName} zu arbeiten, aber es war ersch√∂pft.",
    log_action_mine_iron: '‚õèÔ∏è {agentName} baut {amount} Eisen von {sourceName} ab.',
    log_action_mine_iron_no_source: '{agentName} sucht nach Eisen, findet aber keine Quellen in der N√§he.',
    log_action_craft_success: 'üõ†Ô∏è {agentName} hat erfolgreich einen {itemName} hergestellt.',
    log_action_craft_fail_ingredients: '{agentName} versuchte, einen {itemName} herzustellen, aber es fehlten Zutaten.',
    log_action_craft_fail_skill: '{agentName} fehlt die F√§higkeit ({skill} {level}) zum Herstellen.',
    log_action_craft_fail_tech: '{agentName} fehlt die Technologie ({tech}) zum Herstellen.',
    log_action_market_list_item: 'üìà {agentName} hat 1 {item} auf dem Markt f√ºr einen Systempreis von {price}$ angeboten.',
    log_action_market_buy_item: 'üõí {agentName} hat 1 {item} von {sellerName} f√ºr {price}$ gekauft.',
    log_action_market_too_far: '{agentName} ist zu weit vom Marktplatz entfernt, um zu handeln.',
    log_action_market_no_items: '{agentName} ging zum Markt, hat aber nichts zu verkaufen.',
    log_action_market_is_empty: '{agentName} besuchte den Markt, aber er war leer.',
    log_action_market_cannot_afford: '{agentName} konnte sich keine Artikel auf dem Markt leisten.',
    log_law_violation: '‚öñÔ∏è {agentName} hat das Gesetz "{lawName}" verletzt und wurde mit {punishment}$ bestraft.',
    log_law_violation_arrest: '‚öñÔ∏è Wache {guardName} hat {criminalName} beim Gesetzesbruch beobachtet und verhaftet!',
    log_action_arrest_success: '‚õìÔ∏è {guardName} hat {criminalName} verhaftet und ins Gef√§ngnis geschickt.',
    log_action_release_from_jail: '{agentName} hat seine Zeit abgesessen und wird aus dem Gef√§ngnis entlassen.',
    log_action_patrol: 'üõ°Ô∏è Wache {agentName} patrouilliert das Gebiet.',
    log_election_started: 'üó≥Ô∏è Eine Wahl f√ºr einen neuen Anf√ºhrer hat begonnen!',
    log_election_winner: 'üèÜ {winnerName} hat die Wahl mit {votes} Stimmen gewonnen und ist der neue Anf√ºhrer!',
    log_election_no_winner: 'Die Wahl endete ohne Gewinner. {oldLeaderName} bleibt an der Macht.',
    log_action_vote_cast: '{agentName} hat f√ºr {candidateName} gestimmt.',
    log_action_vote_no_election: '{agentName} m√∂chte w√§hlen, aber es gibt keine aktive Wahl.',
    log_action_vote_no_candidates: '{agentName} m√∂chte w√§hlen, aber es gibt keine Kandidaten.',
    log_action_vote_undecided: '{agentName} konnte sich nicht entscheiden, f√ºr wen er stimmen soll.',
    log_action_run_for_election_success: '{agentName} hat seine Kandidatur f√ºr den Anf√ºhrerposten bekannt gegeben!',
    log_action_run_for_election_no_election: '{agentName} m√∂chte kandidieren, aber es gibt keine aktive Wahl.',
    log_action_run_for_election_already_running: '{agentName} kandidiert bereits f√ºr den Anf√ºhrerposten.',
    log_action_run_for_election_low_status: '{agentName} hat nicht den sozialen Status, um f√ºr den Anf√ºhrerposten zu kandidieren.',
    log_action_enact_law_success: 'üìú Anf√ºhrer {agentName} hat ein neues Gesetz erlassen: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} versuchte, ein Gesetz zu erlassen, ist aber nicht der Anf√ºhrer.',
    log_action_enact_law_exists: 'Anf√ºhrer {agentName} versuchte, das Gesetz "{lawName}" zu erlassen, aber es existiert bereits.',
    log_tech_unlocked: 'üí° Die {cultureName}-Kultur hat {techName} entdeckt!',
    log_leader_unlocks_governance: 'üëë Da {leaderName} Anf√ºhrer wird, erlangt dessen Kultur, {cultureName}, Einblicke in die Regierungsf√ºhrung!',
    log_action_research: 'üî¨ Wissenschaftler {agentName} tr√§gt {points} Punkte zur Forschung seiner Kultur bei.',
    log_action_research_no_culture: '{agentName} kann ohne Kultur nicht forschen.',
    log_action_share_knowledge: 'ü§ù {agentName1} und {agentName2} tauschen Erkenntnisse aus und f√∂rdern die Forschung.',
    log_action_share_knowledge_no_one: '{agentName} suchte einen anderen Wissenschaftler zur Zusammenarbeit, fand aber keinen.',
    log_action_wander_thoughtfully: '{agentName} wandert nachdenklich umher.',
    log_goal_generated: 'üí° {agentName} hat ein neues Ziel: {goalDescription}',
    log_promotion: 'üéâ {agentName} wurde in eine neue Rolle bef√∂rdert: {newRole}!',
    log_action_propose_marriage_success: 'üíç {agentName} macht {targetName} einen Heiratsantrag!',
    log_action_propose_marriage_fail: '{targetName} ist an dem Antrag von {agentName} nicht interessiert.',
    log_action_propose_no_one_suitable: '{agentName} m√∂chte einen Antrag machen, findet aber niemanden in der N√§he.',
    log_action_propose_fail_already_married: '{agentName} versuchte einen Antrag zu machen, ist aber bereits verheiratet.',
    log_action_accept_proposal_success: 'üíí {agentName} nimmt den Antrag von {targetName} an! Sie sind nun verheiratet.',
    log_action_accept_proposal_none: '{agentName} hat keine offenen Antr√§ge zum Annehmen.',
    log_action_reproduce_success: '‚ù§Ô∏è Herzlichen Gl√ºckwunsch! {agentName} und {partnerName} bekommen ein Kind!',
    log_action_reproduce_fail: '{agentName} und {partnerName} haben versucht, ein Kind zu bekommen, aber es war nicht der richtige Zeitpunkt.',
    log_action_reproduce_fail_age: '{agentName} (oder Partner {partnerName}) ist nicht im richtigen Alter, um Kinder zu bekommen.',
    log_action_reproduce_fail_max_offspring: '{agentName} und {partnerName} haben bereits die maximale Anzahl an Kindern erreicht.',
    log_action_reproduce_no_partner: '{agentName} m√∂chte ein Kind, hat aber keinen Partner oder ist nicht in dessen N√§he.',
    log_action_insemination_success: 'üî¨ Die Wissenschaft siegt! {agentName} hat erfolgreich ein Kind durch k√ºnstliche Befruchtung empfangen.',
    log_action_insemination_fail: 'üî¨ Das k√ºnstliche Befruchtungsverfahren f√ºr {agentName} ist fehlgeschlagen.',
    log_action_insemination_fail_funds: '{agentName} kann sich die {cost}$ f√ºr die k√ºnstliche Befruchtung nicht leisten.',
    log_new_child: 'üë∂ Ein neues Kind, {childName}, wurde von {parent1Name} und {parent2Name} geboren.',
    log_action_mentor_success: 'üéì {mentorName} unterrichtet erfolgreich {studentName} in der F√§higkeit {skill}.',
    log_action_mentor_fail_skill: '{agentName} wollte unterrichten, hat aber nicht gen√ºgend Fachwissen.',
    log_action_mentor_no_one: '{agentName} suchte einen jungen Agenten zum Unterrichten, fand aber niemanden Geeigneten.',
    log_action_seek_counseling: '{agentName} sucht Beratung bei {counselorName}.',
    log_action_seek_counseling_fail: '{agentName} wollte Beratung suchen, aber es sind keine Berater verf√ºgbar.',
    log_action_provide_counseling_success: 'üõãÔ∏è Berater {counselorName} gibt {patientName} eine hilfreiche Sitzung, was dessen Stress reduziert.',
    log_action_provide_counseling_fail: '{agentName} suchte jemanden zum Beraten, fand aber niemanden in Not.',
    log_action_meditate: 'üßò {agentName} meditiert und findet einen Moment der Ruhe.',
    log_action_meditate_inspiration: 'üí° {agentName} hat w√§hrend der Meditation eine Erleuchtung!',
    log_action_mourn: 'üñ§ {agentName} nimmt sich einen Moment zum Trauern.',
    log_action_forgive_no_rival: '{agentName} √ºberlegte, Vergebung anzubieten, hat aber niemanden zum Vergeben.',
    log_action_forgive_success: 'üïäÔ∏è {agentName} hat {rivalName} vergeben und ihre Rivalit√§t beendet.',
    log_action_confront_no_partner: '{agentName} f√ºhlt sich eifers√ºchtig, hat aber keinen Partner zum Konfrontieren.',
    log_action_confront_success: 'üò† {agentName} konfrontiert {partnerName} aus Eifersucht, was die Spannung erh√∂ht.',
    log_action_invent_success: 'üî¨ Eureka! {agentName} hat eine neue Technologie erfunden: {techName}!',
    log_action_invent_fail_role: '{agentName} versuchte zu erfinden, aber ihm fehlt die wissenschaftliche Denkweise.',
    log_action_invent_fail_no_basis: '{agentName} fehlt eine grundlegende Technologie, auf der neue Erfindungen aufbauen k√∂nnten.',
    log_action_invent_fail_ai: '{agentName} versuchte zu erfinden, aber die Inspiration verlie√ü ihn.',
    personality_title: 'Pers√∂nlichkeitsmerkmale',
    personality_openness: 'Offenheit',
    personality_conscientiousness: 'Gewissenhaftigkeit',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Vertr√§glichkeit',
    personality_neuroticism: 'Neurotizismus',
    psyche_empathy: 'Empathie',
    psyche_vengefulness: 'Rachsucht',
    psyche_forgiveness: 'Vergebung',
    psyche_searchForMeaning: 'Sinnsuche',
    psyche_decisionPressure: 'Entscheidungsdruck',
    psyche_fearOfDeath: 'Todesangst',
    psyche_boredom: 'Langeweile',
    psyche_inspiration: 'Inspiration',
    psyche_fanaticism: 'Fanatismus',
    psyche_spiritualNeed: 'Spiritueller Bedarf',
    psyche_jealousy: 'Eifersucht',
    emotion_shame: 'Scham',
    emotion_pride: 'Stolz',
    emotion_grief: 'Trauer',
    skill_healing: 'Heilung',
    skill_woodcutting: 'Holzf√§llen',
    skill_rhetoric: 'Rhetorik',
    skill_combat: 'Kampf',
    skill_construction: 'Bauen',
    skill_farming: 'Landwirtschaft',
    skill_mining: 'Bergbau',
    skill_crafting: 'Handwerk',
    skill_trading: 'Handel',
    goal_becomeLeader: 'Anf√ºhrer werden',
    goal_buildLargeHouse: 'Ein Haus bauen',
    goal_masterSkill: 'Eine F√§higkeit meistern',
    goal_avengeRival: 'Rivalen r√§chen',
    goal_achieveWealth: 'Reichtum erlangen',
    goal_mentorYoungAgent: 'Einen jungen Agenten betreuen',
    goal_seekCounseling: 'Beratung suchen',
    goal_findMeaning: 'Sinn finden',
    goal_forgiveRival: 'Rivalen vergeben',
    goal_expressGrief: 'Trauer ausdr√ºcken',
    tech_agriculture: 'Landwirtschaft',
    tech_metallurgy: 'Metallurgie',
    tech_writing: 'Schrift',
    tech_chemistry: 'Chemie',
    tech_governance: 'Regierungsf√ºhrung',
    tech_bioengineering: 'Bioingenieurwesen',
  },
};

export type TranslationKey = keyof typeof translations.en;