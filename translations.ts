export const translations = {
  en: {
    // App.tsx
    realitySimAI: 'RealitySim AI',
    agents: 'Agents',
    deceased: 'Deceased',
    entities: 'Entities',
    environment: 'Environment',
    availableActions: 'Available Actions',
    agentCard_selectAgent: 'Select an agent to view details.',
    entityCard_selectEntity: 'Select an agent or entity to view details.',
    confirmDelete: 'Are you sure you want to delete this {type}? This action cannot be undone.',
    type_agent: 'agent',
    type_entity: 'entity',
    type_action: 'action',
    processingSteps: 'Processing step(s)...',
    culture_none: 'None',
    religion_none: 'None',
    role_none: 'None',
    agentCard_noJournalEntries: 'No journal entries.',
    viewtoggle_left: 'Toggle Left Panel',
    viewtoggle_agentcard: 'Toggle Agent Card',
    viewtoggle_map: 'Toggle World Map',
    viewtoggle_right: 'Toggle Right Panel',
    settings_title: 'Settings',
    settings_aiProvider_label: 'AI Provider',
    settings_lmStudioUrl_label: 'LM Studio URL',
    settings_lmStudioUrl_description: 'The base URL for your running LM Studio instance.',
    settings_lmStudioModel_label: 'LM Studio Model',
    settings_lmStudioModel_description: 'The model identifier to use for chat completions.',
    settings_lmStudioEmbeddingModel_label: 'LM Studio Embedding Model',
    settings_lmStudioEmbeddingModel_description: 'Model for generating embeddings. Leave blank to use main model.',
    settings_geminiModel_label: 'Gemini Model',
    settings_geminiModel_description: 'The Google Gemini model to use.',
    settings_geminiApiKey_label: 'Google Gemini API Key',
    settings_geminiApiKey_value: 'Configured via environment variable',
    settings_geminiApiKey_description: 'The API key is securely managed and not displayed here.',
    settings_cancel: 'Cancel',
    settings_save: 'Save',
    generateWorldModal_title: 'Generate New World',
    generateWorldModal_agentsLabel: 'Number of Agents',
    generateWorldModal_agentsDescription: 'How many agents to create in the new world.',
    generateWorldModal_entitiesLabel: 'Number of Entities',
    generateWorldModal_entitiesDescription: 'How many entities of various types to create.',
    generateContent_foodSources: 'Food Sources',
    generateContent_waterSources: 'Water Sources',
    generateContent_woodSources: 'Wood Sources',
    generateContent_ironSources: 'Iron Sources',
    generateContent_stoneSources: 'Stone Sources',
    generateContent_coalSources: 'Coal Sources',
    generateContent_sandSources: 'Sand Sources',
    generateContent_claySources: 'Clay Sources',
    generateContent_buildings: 'Buildings/General',
    generateWorldModal_generate: 'Generate World',
    generateContent_title: 'Generate Content with AI',
    generateContent_addAgents: 'Add Agents',
    generateContent_agentsLabel: 'Number to Add',
    generateContent_agentsDescription: 'Generate and add new agents to the existing world.',
    generateContent_generateAgentsBtn: 'Generate Agents',
    generateContent_addEntities: 'Add Entities',
    generateContent_entitiesDescriptionCategorized: 'Generate and add new entities to the existing world, sorted by type.',
    generateContent_generateEntitiesBtn: 'Generate Entities',
    psychoanalysis_title: 'Psychoanalysis Report',
    psychoanalysis_generating: 'Generating analysis... the AI is thinking deeply.',
    report_psychodynamik: 'Psychodynamics',
    report_persoenlichkeitsbild: 'Personality Profile',
    report_beziehungsdynamik: 'Relational Dynamics',
    report_trauma: 'Traumatic Traces or Mental Strain',
    report_kultur: 'Cultural & Spiritual Processing',
    report_projektionen: 'Projections or Displacements',
    report_empfehlung: 'Therapeutic Recommendation',
    analytics_title: 'Analytics Dashboard',
    election_title: 'Election',
    election_status_none: 'No active election',
    election_status_active: 'Active until {endDate}',
    election_status_inactive: 'Not active',

    // services/simulation.ts
    reason_for_imprisonment_unknown: 'The exact reason for imprisonment is lost to memory, likely related to a recent crime.',

    // components/AgentCard.tsx
    lifeStage_child: 'Child',
    lifeStage_adolescent: 'Adolescent',
    lifeStage_adult: 'Adult',
    lifeStage_elder: 'Elder',
    world_leader: 'Leader',
    export_journal_button: 'Export Journal as Markdown',
    agentCard_tech: 'Technologies',

    // components/ControlPanel.tsx
    controlPanel_generateWorld: 'New World',
    controlPanel_addWithAI: 'Add...',
    controlPanel_step: 'Step',
    controlPanel_run: 'Run',
    controlPanel_reset: 'Reset',
    controlPanel_analyze: 'Analyze World',
    controlPanel_analyze_tooltip: 'Generate a detailed analysis of the current world state.',

    // components/LogPanel.tsx
    logPanel_eventLog: 'Event Log',

    // components/WorldGraph.tsx
    worldGraph_title: 'World Map & Relationships',

    // components/CreateObjectPanel.tsx
    create_invalidJson: 'Invalid JSON format in beliefs.',
    create_createNew: 'Create New...',
    create_agent: 'Agent',
    create_entity: 'Entity',
    create_action: 'Action',
    create_name: 'Name',
    create_generate_random_name: 'Generate random name',
    create_description: 'Description',
    create_generate_random_description: 'Generate random description',
    create_beliefsPlaceholder: 'Beliefs (JSON, e.g. {"key": 0.8})',
    create_generate_random_beliefs: 'Generate random beliefs',
    create_genome_placeholder: 'Genome (comma-separated, e.g. G-SOCIAL)',
    create_generate_genes_title: 'Generate random genes',
    create_role_label: 'Role',
    create_randomize_personality: 'Randomize',
    create_beliefKeyPlaceholder: 'Belief Key (optional)',
    create_mechanical_effects: 'Mechanical Effects (Optional)',
    create_costs_placeholder: 'Costs (JSON, e.g. {"wood": 10})',
    create_stat_changes_label: 'Stat Changes (+/-)',
    create_skill_gain_label: 'Skill Gain',
    create_skill_to_gain: 'Skill',
    create_amount: 'Amount',
    create_create: 'Create',

    // components/ExporterPanel.tsx
    stateManagement_title: 'State Management',
    stateManagement_save: 'Save World State',
    stateManagement_load: 'Load World State',
    export_conversations: 'Export Conversations',
    export_statistics: 'Export Statistics',
    stateManagement_advanced: 'Advanced Export',
    export_env: 'Export Environment Only',
    export_agents: 'Export Agents Only',
    export_entities: 'Export Entities Only',

    // components/AdminPanel.tsx
    admin_title: 'Admin Panel',
    admin_politicalManagement: 'Political Management',
    admin_currentLeader: 'Current Leader',
    admin_selectAgent: 'Select Agent...',
    admin_setLeader: 'Set Leader',
    admin_startElection: 'Start New Election',
    admin_laws: 'Laws',
    admin_lawName: 'Law Name',
    admin_violatingAction: 'Violating Action',
    admin_addLaw: 'Add Law',
    admin_techManagement: 'Technology Management',
    admin_researchPoints: 'Research Points',
    admin_unlock: 'Unlock',
    admin_agentManagement: 'Agent Management',
    admin_resurrect: 'Resurrect',
    admin_set: 'Set',
    admin_sicknessPlaceholder: 'Sickness name (or empty)',
    admin_imprisonDuration: 'Jail time (steps)',
    admin_imprison: 'Imprison',
    admin_ruleEditor: 'World Rule Editor',

    // hooks/useSimulation.ts
    stats_report_title: 'Statistics Report',
    stats_marriages: 'Marriages',
    stats_births: 'Births',
    stats_imprisonments: 'Imprisonments',
    stats_fights: 'Fights',

    // components/AnalyticsDashboard.tsx
    analytics_social_download_desc: 'A static preview is not available. Download an interactive HTML file to explore the full social network graph, including relationships, cultures, and agent details.',
    analytics_social_download_btn: 'Download Interactive Map',
    analytics_eco_no_transactions: 'No currency transactions recorded in the selected time window.',
    analytics_time_window: 'Time Window (Steps)',
    analytics_tech_progress: 'Technological Progress by Culture',
    analytics_tab_social: 'Social',
    analytics_tab_economic: 'Economic',
    analytics_tab_cultural: 'Cultural',
    analytics_tab_tech: 'Technology',

    // components/AnalysisReportModal.tsx
    analysis_title: 'World Analysis Report',
    analysis_download: 'Download',
    analysis_tab_current: 'Current Report',
    analysis_tab_history: 'History',
    analysis_tab_development: 'Development',
    analysis_no_report: 'No analysis report has been generated yet.',
    analysis_report_from: 'Report from',
    analysis_view: 'View',
    analysis_no_history: 'No historical reports available.',
    analysis_dev_totalAgents: 'Total Agents',
    analysis_dev_avgWealth: 'Average Wealth',
    analysis_dev_friendships: 'Avg. Friendships',
    analysis_dev_notEnoughData: 'Not enough historical data to display development chart.',
    analysis_generating: 'Generating world analysis...',


    // UI Labels
    agentCard_statusAndNeeds: 'Status & Needs',
    agentCard_healthy: 'Healthy',
    agentCard_deceased: 'Deceased',
    agentCard_imprisoned: 'Imprisoned',
    agentCard_release_at: 'Release at step',
    agentCard_age: 'Age',
    agentCard_culture: 'Culture',
    agentCard_religion: 'Religion',
    agentCard_role: 'Role',
    agentCard_health: 'Health',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Thirst',
    agentCard_fatigue: 'Fatigue',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Social Status',
    agentCard_sickness: 'Sickness',
    agentCard_currency: 'Currency',
    personality_title: 'Personality',
    psyche_title: 'Psyche & Drives',
    psychoanalysis_generate_button: 'Generate Psychoanalysis',
    agentCard_interact: 'Interact',
    agentCard_promptPlaceholder: 'Give a high-level command to {name}...',
    agentCard_promptPlaceholderRaw: 'Enter a direct action name...',
    agentCard_promptPlaceholderDeceased: 'This agent is deceased.',
    agentCard_useAi: 'Use AI for interpretation',
    agentCard_beliefs: 'Beliefs',
    agentCard_emotions: 'Emotions',
    agentCard_skills: 'Skills',
    agentCard_goals: 'Goals',
    agentCard_trauma: 'Trauma',
    agentCard_relationships: 'Relationships',
    agentCard_inventory: 'Inventory',
    agentCard_family: 'Family',
    agentCard_child_relation: 'Child',
    agentCard_no_children: 'No children.',
    agentCard_property: 'Property',
    agentCard_genome: 'Genome',
    agentCard_noBeliefs: 'No defined beliefs.',
    agentCard_noEmotions: 'No strong emotions currently.',
    agentCard_noGoals: 'No active goals.',
    agentCard_noTrauma: 'No recorded trauma.',
    agentCard_noRelationships: 'No established relationships.',
    agentCard_noInventory: 'Inventory is empty.',
    agentCard_noProperty: 'Owns no property.',
    agentCard_noGenome: 'No significant genetic markers.',
    agentCard_jailJournal: 'Jail Journal',

    // Entity Card
    entityCard_title: "Entity Details",
    entityCard_owner: "Owner",
    entityCard_unowned: "Unowned",
    entityCard_position: "Position",
    entityCard_resourceDetails: "Resource Details",
    entityCard_resourceType: "Type",
    entityCard_quantity: "Quantity",
    entityCard_jailDetails: "Jail Details",
    entityCard_inmates: "Inmates",
    entityCard_noInmates: "No inmates currently.",
    entityCard_marketDetails: "Marketplace Details",
    entityCard_listings: "Current Listings",
    entityCard_noListings: "No items listed for sale.",
    entityCard_factoryDetails: "Factory Details",
    entityCard_product: "Product",
    entityCard_employees: "Employees",
    entityCard_noEmployees: "No employees.",

    // Roles
    role_worker: 'Worker',
    role_healer: 'Healer',
    role_scientist: 'Scientist',
    role_leader: 'Leader',
    role_trader: 'Trader',
    role_crafter: 'Crafter',
    role_guard: 'Guard',
    role_counselor: 'Counselor',
    role_entrepreneur: 'Entrepreneur',

    // Items
    item_advanced_medicine: 'Advanced Medicine',
    item_ancient_artifacts: 'Ancient Artifacts',
    item_bandages: 'Bandages',
    item_bricks: 'Bricks',
    item_charcoal: 'Charcoal',
    item_clay: 'Clay',
    item_coal: 'Coal',
    item_food: 'Food',
    item_furniture: 'Furniture',
    item_glass: 'Glass',
    item_herbs: 'Herbs',
    item_iron: 'Iron',
    item_iron_ingot: 'Iron Ingot',
    item_medicine: 'Medicine',
    item_plow: 'Plow',
    item_pottery: 'Pottery',
    item_research_notes: 'Research Notes',
    item_sand: 'Sand',
    item_steel_ingot: 'Steel Ingot',
    item_stone: 'Stone',
    item_sword: 'Sword',
    item_tools: 'Tools',
    item_water: 'Water',
    item_wood: 'Wood',

    // Relationships
    relationship_stranger: 'Stranger',
    relationship_acquaintance: 'Acquaintance',
    relationship_friend: 'Friend',
    relationship_rival: 'Rival',
    relationship_partner: 'Partner',
    relationship_spouse: 'Spouse',
    'relationship_ex-partner': 'Ex-Partner',

    // Goals
    goal_becomeLeader: 'Become Leader',
    goal_buildLargeHouse: 'Build a Large House',
    goal_masterSkill: 'Master a Skill',
    goal_avengeRival: 'Avenge Rival',
    goal_achieveWealth: 'Achieve Wealth',
    goal_mentorYoungAgent: 'Mentor a Young Agent',
    goal_seekCounseling: 'Seek Counseling',
    goal_findMeaning: 'Find Meaning of Life',
    goal_forgiveRival: 'Forgive a Rival',
    goal_expressGrief: 'Express Grief',

    // Genes & Descriptions
    'gene_G-RESISTANT': 'Resistant',
    'gene_desc_G-RESISTANT': 'Higher resistance to sickness.',
    'gene_G-AGILE': 'Agile',
    'gene_desc_G-AGILE': 'Moves faster on the map.',
    'gene_G-SOCIAL': 'Social',
    'gene_desc_G-SOCIAL': 'Builds relationships more easily.',
    'gene_G-LONGEVITY': 'Longevity',
    'gene_desc_G-LONGEVITY': 'Slower health decline from old age.',
    'gene_G-FASTHEAL': 'Fast Healer',
    'gene_desc_G-FASTHEAL': 'Recovers more health when resting.',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_desc_G-INTELLIGENT': 'Gains skills and contributes more to research.',
    'gene_G-FERTILE': 'Fertile',
    'gene_desc_G-FERTILE': 'Higher chance of successful reproduction.',

    // Chart Keys - Personality
    personality_openness: 'Openness',
    personality_conscientiousness: 'Conscientiousness',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Agreeableness',
    personality_neuroticism: 'Neuroticism',

    // Chart Keys - Psyche
    psyche_empathy: 'Empathy',
    psyche_vengefulness: 'Vengefulness',
    psyche_forgiveness: 'Forgiveness',
    psyche_searchForMeaning: 'Search for Meaning',
    psyche_decisionPressure: 'Decision Pressure',
    psyche_fearOfDeath: 'Fear of Death',
    psyche_boredom: 'Boredom',
    psyche_inspiration: 'Inspiration',
    psyche_fanaticism: 'Fanaticism',
    psyche_spiritualNeed: 'Spiritual Need',
    psyche_jealousy: 'Jealousy',

    // Chart Keys - Beliefs
    belief_admin_access: 'Admin Access',
    belief_aggression: 'Aggression',
    belief_community_first: 'Community First',
    belief_immorality_ok: 'Immorality is OK',
    belief_knowledge_is_freedom: 'Knowledge is Freedom',
    belief_knowledge_is_sacred: 'Knowledge is Sacred',
    belief_law_is_absolute: 'Law is Absolute',
    belief_nature_good: 'Nature is Sacred',
    belief_past_informs_future: 'Past Informs Future',
    belief_planning_ahead_good: 'Planning is Good',
    belief_progress_good: 'Progress is Good',
    belief_social_interaction_good: 'Socializing is Good',
    belief_tradition_important: 'Tradition is Important',
    belief_wealth_is_power: 'Wealth is Power',
    belief_weather_rainy: 'Rainy Weather is Grim',
    belief_weather_sunny: 'Sunny Weather is Nice',

    // Chart Keys - Emotions
    emotion_anger: 'Anger',
    emotion_fear: 'Fear',
    emotion_grief: 'Grief',
    emotion_happiness: 'Happiness',
    emotion_love: 'Love',
    emotion_pride: 'Pride',
    emotion_sadness: 'Sadness',
    emotion_shame: 'Shame',
    emotion_trust: 'Trust',

    // Chart Keys - Skills
    skill_combat: 'Combat',
    skill_construction: 'Construction',
    skill_crafting: 'Crafting',
    skill_farming: 'Farming',
    skill_healing: 'Healing',
    skill_mining: 'Mining',
    skill_rhetoric: 'Rhetoric',
    skill_trading: 'Trading',
    skill_woodcutting: 'Woodcutting',

    // Admin Panel
    stat_currency: 'Currency',
    stat_fatigue: 'Fatigue',
    stat_health: 'Health',
    stat_hunger: 'Hunger',
    stat_stress: 'Stress',
    stat_thirst: 'Thirst',

    // Tech
    tech_advanced_construction: 'Advanced Construction',
    tech_agriculture: 'Agriculture',
    tech_bioengineering: 'Bioengineering',
    tech_chemistry: 'Chemistry',
    tech_governance: 'Governance',
    tech_manufacturing: 'Manufacturing',
    tech_metallurgy: 'Metallurgy',
    tech_writing: 'Writing',
    
    // Actions
    action_Move_North: "Move North",
    action_desc_Move_North: "Move one step north.",
    action_Move_South: "Move South",
    action_desc_Move_South: "Move one step south.",
    action_Move_East: "Move East",
    action_desc_Move_East: "Move one step east.",
    action_Move_West: "Move West",
    action_desc_Move_West: "Move one step west.",
    action_Eat_Food: "Eat Food",
    action_desc_Eat_Food: "Eat food from inventory to reduce hunger.",
    action_Drink_Water: "Drink Water",
    action_desc_Drink_Water: "Find a water source and drink to reduce thirst.",
    action_Gather_Food: "Gather Food",
    action_desc_Gather_Food: "Gather food from a nearby source.",
    action_Gather_Wood: "Gather Wood",
    action_desc_Gather_Wood: "Gather wood from a nearby forest.",
    action_Build_Shelter: "Build Shelter",
    action_desc_Build_Shelter: "Build a small shelter using 10 wood.",
    action_Rest: "Rest",
    action_desc_Rest: "Rest to recover fatigue and health.",
    action_Work_for_money: "Work for money",
    action_desc_Work_for_money: "Perform a day of generic labor to earn a small amount of currency.",
    action_Found_Company: "Found Company",
    action_desc_Found_Company: "Buy an unowned resource-producing entity to become an entrepreneur.",
    action_Work_for_Company: "Work for Company",
    action_desc_Work_for_Company: "Work at a privately owned company to earn a wage from the owner.",
    action_Mine_Iron: "Mine Iron",
    action_desc_Mine_Iron: "Mine iron from a nearby ore vein.",
    action_Craft_Advanced_Medicine: "Craft Advanced Medicine",
    action_desc_Craft_Advanced_Medicine: "Crafts advanced_medicine from ingredients.",
    action_Craft_Charcoal: "Craft Charcoal",
    action_desc_Craft_Charcoal: "Crafts charcoal from ingredients.",
    action_Smelt_Steel_Ingot: "Smelt Steel Ingot",
    action_desc_Smelt_Steel_Ingot: "Crafts steel_ingot from ingredients.",
    action_Craft_Sword: "Craft Sword",
    action_desc_Craft_Sword: "Crafts sword from ingredients.",
    action_Craft_Plow: "Craft Plow",
    action_desc_Craft_Plow: "Crafts plow from ingredients.",
    action_Craft_Bricks: "Craft Bricks",
    action_desc_Craft_Bricks: "Crafts bricks from ingredients.",
    action_Craft_Glass: "Craft Glass",
    action_desc_Craft_Glass: "Crafts glass from ingredients.",
    action_Craft_Tools: "Craft Tools",
    action_desc_Craft_Tools: "Crafts tools from ingredients.",
    action_Craft_Furniture: "Craft Furniture",
    action_desc_Craft_Furniture: "Crafts furniture from ingredients.",
    action_Craft_Pottery: "Craft Pottery",
    action_desc_Craft_Pottery: "Crafts pottery from ingredients.",
    action_List_Item_on_Market: "List Item on Market",
    action_desc_List_Item_on_Market: "List an item from inventory on the public market.",
    action_Buy_from_Market: "Buy from Market",
    action_desc_Buy_from_Market: "Buy an item listed on the market.",
    action_Vote: "Vote",
    action_desc_Vote: "Vote for a candidate in the current election.",
    action_Run_for_Election: "Run for Election",
    action_desc_Run_for_Election: "Declare candidacy in the current election.",
    action_Propose_New_Law: "Propose New Law",
    action_desc_Propose_New_Law: "As leader, propose a new law for the community to vote on.",
    action_Found_Religion: "Found Religion",
    action_desc_Found_Religion: "Attempt to establish a new religion for your culture.",
    action_Research: "Research",
    action_desc_Research: "Contribute to cultural research.",
    action_Invent_Technology: "Invent Technology",
    action_desc_Invent_Technology: "Attempt to invent a new technology based on current knowledge.",
    action_Share_Knowledge: "Share Knowledge",
    action_desc_Share_Knowledge: "Collaborate with another scientist to boost research.",
    action_Leave_Culture: "Leave Culture",
    action_desc_Leave_Culture: "Leave your current culture to become unaffiliated.",
    action_Found_Culture: "Found Culture",
    action_desc_Found_Culture: "Found a new culture based on your own beliefs. Requires social status > 40 and being unaffiliated.",
    action_Recruit_for_Culture: "Recruit for Culture",
    action_desc_Recruit_for_Culture: "Attempt to persuade a nearby agent to join your culture.",
    action_Propose_Marriage: "Propose Marriage",
    action_desc_Propose_Marriage: "Propose marriage to a suitable nearby agent.",
    action_Accept_Proposal: "Accept Proposal",
    action_desc_Accept_Proposal: "Accept a marriage proposal.",
    action_Reproduce: "Reproduce",
    action_desc_Reproduce: "Attempt to have a child with a spouse.",
    action_Artificial_Insemination: "Artificial Insemination",
    action_desc_Artificial_Insemination: "Use advanced technology to conceive a child. Requires Bioengineering tech. Cost: 500 Currency.",
    action_Mentor_young_agent: "Mentor young agent",
    action_desc_Mentor_young_agent: "Teach a skill to a younger agent.",
    action_Seek_Counseling: "Seek Counseling",
    action_desc_Seek_Counseling: "Seek help from a counselor to reduce stress.",
    action_Provide_Counseling: "Provide Counseling",
    action_desc_Provide_Counseling: "As a counselor, help an agent reduce stress.",
    action_Talk: "Talk",
    action_desc_Talk: "Talk to a nearby agent or move towards them to talk.",
    action_Fight: "Fight",
    action_desc_Fight: "Fight with a nearby agent.",
    action_Steal: "Steal",
    action_desc_Steal: "Attempt to steal from a nearby agent.",
    action_Patrol: "Patrol",
    action_desc_Patrol: "As a guard, patrol the area.",
    action_Meditate: "Meditate",
    action_desc_Meditate: "Meditate to find peace and inspiration.",
    action_Mourn: "Mourn",
    action_desc_Mourn: "Take time to process grief.",
    action_Offer_Forgiveness: "Offer Forgiveness",
    action_desc_Offer_Forgiveness: "Offer forgiveness to a rival, potentially ending the rivalry.",
    action_Confront_Partner: "Confront Partner",
    action_desc_Confront_Partner: "Confront your spouse/partner due to jealousy.",

    // Logs
    log_simulationInitialized: 'Simulation initialized.',
    log_simulationStepped: 'Simulation stepped forward.',
    log_simulationRanSteps: 'Simulation ran for {steps} steps.',
    log_simulationReset: 'Simulation reset to initial state.',
    log_agentProcessingPrompt: 'Agent {agentId} processing prompt: "{prompt}" (using {aiInfo})',
    log_aiSuggestedAction: 'AI suggested action: "{action}"',
    log_aiFailed: 'AI could not find a suitable action. No action taken.',
    log_aiError: 'Error with AI API: {error}',
    error_lmStudio_cors: 'Failed to connect to LM Studio. This is usually a Cross-Origin Resource Sharing (CORS) issue. Please check the following in your LM Studio application: 1. Go to the "Local Server" tab. 2. Ensure the server is "Running". 3. **Crucially, find the "CORS" option and make sure it is checked/enabled.** 4. Verify the URL in this app\'s settings matches the one shown in LM Studio.',
    error_lmStudio_url_invalid: "Invalid LM Studio URL format. Please provide a valid base URL like 'http://localhost:1234'.",
    error_gemini_no_key: 'Google Gemini API key not found in environment variables. Please ensure it is set.',
    log_createdAgent: 'Created new agent: {name}',
    log_createdEntity: 'Created new entity: {name}',
    log_createdAction: 'Created new action: {name}',
    log_removed: 'Removed {type}: {name}',
    log_adminSetHealth: "Admin set {name}'s health to {health}.",
    log_adminSetPosition: "Admin set {name}'s position to ({x}, {y}).",
    log_adminInflictedSickness: "Admin inflicted {name} with {sickness}.",
    log_adminCured: 'Admin cured {name}.',
    log_adminResurrected: 'Admin resurrected {name}.',
    log_adminModifiedEnv: 'Admin directly modified the environment.',
    log_exported: 'Exported partial {type} data.',
    log_stateSaved: 'Simulation state saved to file.',
    log_stateLoaded: 'Simulation state successfully loaded from file.',
    log_loadError: 'Failed to load state from file: {error}',
    log_runningSimulation: 'Running simulation for {steps} steps...',
    log_generating: 'Generating...',
    log_generatingWorld: 'Generating world...',
    log_worldGenerated: 'New world processed successfully.',
    log_worldGenerated_warning: '⚠️ AI generated {genAgents}/{reqAgents} agents and {genEntities}/{reqEntities} entities. Continuing with generated results.',
    log_generatingAgents: 'Generating {count} new agents...',
    log_generatingEntities: 'Generating {count} new entities...',
    log_addedAgents: 'Added {count} new agents to the world.',
    log_addedEntities: 'Added {count} new entities to the world.',
    log_configure_ai_full: 'AI provider not configured. Please open settings to select and configure an AI provider.',
    log_adminSetCurrency: "Admin set {name}'s currency to {currency}$.",
    log_adminRepealedLaw: "Admin repealed the law: {lawName}.",
    log_adminSetLeader: "Admin has appointed {name} as the new leader.",
    log_adminUnlockedTech: "Admin unlocked technology \"{techId}\" for {cultureName}.",
    log_adminImprisoned: "Admin has imprisoned {name} for {duration} steps.",
    log_psychoanalysis_applied: '🧬 Psychoanalysis results have been integrated into {agentName}\'s psyche.',
    log_grief: '💔 {agentName} is struck with grief over the death of {deceasedName}.',
    log_sickness_spread: '☣️ {infectedName} caught {sickness} from {sourceName}!',
    log_cognitive_dissonance: '🤔 {agentName} feels a pang of stress from acting against their beliefs.',
    log_action_custom_success: '{agentName} successfully performed the custom action: "{actionName}".',
    log_action_custom_fail_cost: '{agentName} tried to perform "{actionName}" but lacked {amount} {item}.',
    'log_action_leave_culture_success': '{agentName} has left their culture to become unaffiliated.',
    'log_action_leave_culture_fail': '{agentName} cannot leave a culture they are not part of.',
    'log_action_found_culture_success': '🏛️ A new movement begins! {agentName} has founded the culture: {cultureName}.',
    'log_action_found_culture_fail_member': '{agentName} cannot found a new culture while already being part of one.',
    'log_action_found_culture_fail_status': '{agentName} lacks the social influence (status > 40) to found a new culture.',
    'log_action_recruit_culture_success': '🤝 {recruiterName} successfully convinced {targetName} to join the {cultureName} culture!',
    'log_action_recruit_culture_fail': '{recruiterName} tried to recruit {targetName}, but was unconvincing.',
    'log_action_recruit_culture_no_target': '{agentName} looked for someone to recruit, but found no one suitable nearby.',
    'log_action_recruit_culture_no_culture': '{agentName} cannot recruit for a culture they are not part of.',
    log_action_propose_law_approved: "The {cultureName} culture has approved the new law '{lawName}'. It is now in effect.",
    log_action_propose_law_rejected: "The {cultureName} culture has rejected the proposed law '{lawName}'.",
    log_action_propose_law_fail_ai: "{agentName} tried to devise a new law, but could not come up with a good proposal.",
    log_action_propose_law_not_leader: "{agentName} tried to propose a law, but is not the leader.",
    // Action Logs
    log_action_eat: '🍎 {agentName} eats some food, reducing their hunger.',
    log_action_eat_no_food: '{agentName} wants to eat, but has no food in their inventory.',
    log_action_drink: '💧 {agentName} drinks from {sourceName}, quenching their thirst.',
    log_action_drink_no_source: '{agentName} is thirsty, but cannot find a water source nearby.',
    log_action_gather_food: '🧺 {agentName} gathers {amount} food from {sourceName}.',
    log_action_gather_food_no_source: '{agentName} looks for food, but finds no sources nearby.',
    log_action_gather_fail_private: '{agentName} tries to gather from {resourceName}, but it is privately owned.',
    log_action_gather_wood: '🪵 {agentName} gathers {amount} wood from {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} looks for wood, but finds no sources nearby.',
    log_action_build_shelter: '🏡 {agentName} uses 10 wood to build a small shelter.',
    log_action_build_shelter_no_wood: '{agentName} wants to build a shelter but needs {woodCost} wood.',
    log_action_move_towards_resource: '{agentName} moves towards {resourceName}.',
    log_action_move_towards_agent: '{agentName} moves towards {targetName}.',
    log_action_move: '{agentName} moves {direction} to ({x}, {y}).',
    log_action_custom: 'Custom action "{actionName}" executed by {agentName}.',
    log_action_fight: '💥 {agentName1} and {agentName2} got into a fight!',
    log_action_steal_success: '✋ {stealer} stole 1 {item} from {victim}!',
    log_action_steal_fail: ' botched a theft attempt on {victim} and was caught!',
    log_action_steal_no_target: '{agentName} looked for someone to steal from, but found no suitable targets.',
    log_action_rest: '💤 {agentName} rests and recovers health to {newHealth}.',
    log_action_rest_and_cured: '💤 {agentName} rests, recovers, and feels their {sickness} subsiding!',
    log_action_talk: '💬 {speakerName} says to {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wanted to talk, but no one was nearby.',
    log_action_talk_failed: '{agentName} tried to start a conversation, but got lost in thought.',
    log_survival_starving: '‼️ {agentName} is starving and losing health!',
    log_survival_dehydrated: '‼️ {agentName} is dehydrated and losing health!',
    log_survival_sickness: '🤢 {agentName} is suffering from {sickness} and loses health.',
    log_survival_succumbed_needs: '💀 {agentName} has succumbed to hunger or thirst.',
    log_execution_deceased: '{agentName} cannot execute actions as they are deceased.',
    log_execution_actionNotFound: '{agentName} could not find a matching action for prompt: "{prompt}"',
    log_execution_imprisoned: '{agentName} cannot perform actions while imprisoned.',
    log_action_fail_role: '{agentName} cannot perform this action, requires role: {requiredRole}.',
    log_action_work_for_money: '💰 {agentName} works for a day, earning {amount}$.',
    log_action_found_company_success: '🏢 {agentName} founded a company by buying the property "{resourceName}" for {cost}$ and became an entrepreneur!',
    log_action_found_company_fail_funds: '{agentName} wants to found a company, but cannot afford the {cost}$ price.',
    log_action_found_company_fail_none: '{agentName} looked for property to buy to found a company, but none was available.',
    log_action_work_for_company_success: '💼 {agentName} worked at {resourceName} for {ownerName} and earned {wage}$!',
    log_action_work_for_company_fail_none: '{agentName} looked for work, but no companies were hiring nearby.',
    log_action_work_for_company_fail_no_owner: '{agentName} tried to work, but the owner could not be found.',
    log_action_work_for_company_fail_owner_broke: "{agentName} wanted to work for {ownerName}, but they couldn't afford the wage.",
    log_action_work_for_company_fail_no_resources: "{agentName} tried to work at {resourceName}, but it has been depleted.",
    log_action_mine_iron: '⛏️ {agentName} mines {amount} iron from {sourceName}.',
    log_action_mine_iron_no_source: '{agentName} looks for iron, but finds no sources nearby.',
    log_action_craft_success: '🛠️ {agentName} successfully crafted a {itemName}.',
    log_action_craft_fail_ingredients: '{agentName} tried to craft a {itemName} but lacked ingredients.',
    log_action_craft_fail_skill: '{agentName} lacks the skill ({skill} {level}) to craft.',
    log_action_craft_fail_tech: '{agentName} lacks the technology ({tech}) to craft.',
    log_action_market_list_item: '📈 {agentName} listed 1 {item} on the market for a system price of {price}$.',
    log_action_market_buy_item: '🛒 {agentName} bought 1 {item} from {sellerName} for {price}$.',
    log_action_market_too_far: '{agentName} is too far from the marketplace to trade.',
    log_action_market_no_items: '{agentName} went to the market but has nothing to sell.',
    log_action_market_is_empty: '{agentName} visited the market, but it was empty.',
    log_action_market_cannot_afford: '{agentName} could not afford any items at the market.',
    log_law_violation: '⚖️ {agentName} violated the "{lawName}" law and was fined {punishment}$.',
    log_law_violation_arrest: '⚖️ Guard {guardName} witnessed {criminalName} breaking the law and arrested them!',
    log_law_violation_arrest_witnessed: "🛡️ Guard {guardName} witnessed {criminalName} fighting and arrested them!",
    log_guard_warning: "🛡️ Guard {guardName} warned {criminalName} to stop {crime}.",
    log_action_arrest_success: '⛓️ {guardName} arrested {criminalName} and sent them to jail.',
    log_action_release_from_jail: '{agentName} has served their time and is released from jail.',
    log_action_patrol: '🛡️ Guard {agentName} is patrolling the area.',
    log_election_started: '🗳️ An election for a new leader has begun!',
    log_election_winner: '🏆 {winnerName} has won the election with {votes} votes and is the new leader!',
    log_election_no_winner: 'The election ended with no winner. {oldLeaderName} remains in power.',
    log_action_vote_cast: '{agentName} voted for {candidateName}.',
    log_action_vote_no_election: '{agentName} wants to vote, but there is no active election.',
    log_action_vote_no_candidates: '{agentName} wants to vote, but there are no candidates.',
    log_action_vote_undecided: '{agentName} could not decide who to vote for.',
    log_action_run_for_election_success: '{agentName} has announced their candidacy for leader!',
    log_action_run_for_election_no_election: '{agentName} wants to run, but there is no active election.',
    log_action_run_for_election_already_running: '{agentName} is already running for leader.',
    log_action_run_for_election_low_status: '{agentName} lacks the social status to run for leader.',
    log_action_enact_law_success: '📜 Leader {agentName} has enacted a new law: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} tried to enact a law, but is not the leader.',
    log_action_enact_law_exists: 'Leader {agentName} tried to enact law "{lawName}", but it already exists.',
    log_tech_unlocked: '💡 The {cultureName} culture has discovered {techName}!',
    log_leader_unlocks_governance: '👑 As {leaderName} becomes leader, their culture, {cultureName}, gains insight into Governance!',
    log_action_research: '🔬 Scientist {agentName} contributes {points} points to their culture\'s research.',
    log_action_research_no_culture: '{agentName} cannot research without a culture.',
    log_action_share_knowledge: '🤝 {agentName1} and {agentName2} share insights, boosting research.',
    log_action_share_knowledge_no_one: '{agentName} looked for another scientist to collaborate with, but found none.',
    log_action_wander_thoughtfully: '{agentName} wanders thoughtfully.',
    log_goal_generated: '💡 {agentName} has a new goal: {goalDescription}',
    log_promotion: '🎉 {agentName} has been promoted to a new role: {newRole}!',
    log_action_propose_marriage_success: '💍 {agentName} proposes to {targetName}!',
    log_action_propose_marriage_fail: '{targetName} is not interested in {agentName}\'s proposal.',
    log_action_propose_no_one_suitable: '{agentName} wants to propose, but finds no one suitable nearby.',
    log_action_propose_fail_already_married: '{agentName} tried to propose, but is already married.',
    log_action_accept_proposal_success: '💒 {agentName} accepts {targetName}\'s proposal! They are now married.',
    log_action_accept_proposal_none: '{agentName} has no pending proposals to accept.',
    log_action_reproduce_success: '❤️ Congratulations! {agentName} and {partnerName} are having a child!',
    log_action_reproduce_fail: '{agentName} and {partnerName} tried to have a child, but it was not the right time.',
    log_action_reproduce_fail_age: '{agentName} (or partner {partnerName}) is not in the right age range to have children.',
    log_action_reproduce_fail_max_offspring: '{agentName} and {partnerName} have already reached the maximum number of children.',
    log_action_reproduce_no_partner: '{agentName} wants a child, but has no partner or is not near them.',
    log_action_insemination_success: '🔬 Science prevails! {agentName} successfully conceived a child through artificial insemination.',
    log_action_insemination_fail: '🔬 The artificial insemination procedure for {agentName} failed.',
  },
  de: {
    // App.tsx
    realitySimAI: 'RealitySim AI',
    agents: 'Agenten',
    deceased: 'Verstorben',
    entities: 'Entitäten',
    environment: 'Umgebung',
    availableActions: 'Verfügbare Aktionen',
    agentCard_selectAgent: 'Wähle einen Agenten aus, um Details anzuzeigen.',
    entityCard_selectEntity: 'Wähle einen Agenten oder eine Entität aus, um Details anzuzeigen.',
    confirmDelete: 'Sind Sie sicher, dass Sie diese(n) {type} löschen möchten? Diese Aktion kann nicht rückgängig gemacht werden.',
    type_agent: 'Agenten',
    type_entity: 'Entität',
    type_action: 'Aktion',
    processingSteps: 'Verarbeite Schritt(e)...',
    culture_none: 'Keine',
    religion_none: 'Keine',
    role_none: 'Keine',
    agentCard_noJournalEntries: 'Keine Tagebucheinträge.',
    viewtoggle_left: 'Linkes Panel umschalten',
    viewtoggle_agentcard: 'Agentenkarte umschalten',
    viewtoggle_map: 'Weltkarte umschalten',
    viewtoggle_right: 'Rechtes Panel umschalten',
    settings_title: 'Einstellungen',
    settings_aiProvider_label: 'KI-Anbieter',
    settings_lmStudioUrl_label: 'LM Studio URL',
    settings_lmStudioUrl_description: 'Die Basis-URL Ihrer laufenden LM Studio Instanz.',
    settings_lmStudioModel_label: 'LM Studio Modell',
    settings_lmStudioModel_description: 'Der Modellbezeichner für Chat-Vervollständigungen.',
    settings_lmStudioEmbeddingModel_label: 'LM Studio Embedding Modell',
    settings_lmStudioEmbeddingModel_description: 'Modell zum Generieren von Embeddings. Leer lassen, um Hauptmodell zu verwenden.',
    settings_geminiModel_label: 'Gemini Modell',
    settings_geminiModel_description: 'Das zu verwendende Google Gemini Modell.',
    settings_geminiApiKey_label: 'Google Gemini API-Schlüssel',
    settings_geminiApiKey_value: 'Über Umgebungsvariable konfiguriert',
    settings_geminiApiKey_description: 'Der API-Schlüssel wird sicher verwaltet und hier nicht angezeigt.',
    settings_cancel: 'Abbrechen',
    settings_save: 'Speichern',
    generateWorldModal_title: 'Neue Welt generieren',
    generateWorldModal_agentsLabel: 'Anzahl der Agenten',
    generateWorldModal_agentsDescription: 'Wie viele Agenten in der neuen Welt erstellt werden sollen.',
    generateWorldModal_entitiesLabel: 'Anzahl der Entitäten',
    generateWorldModal_entitiesDescription: 'Wie viele Entitäten verschiedener Typen erstellt werden sollen.',
    generateContent_foodSources: 'Nahrungsquellen',
    generateContent_waterSources: 'Wasserquellen',
    generateContent_woodSources: 'Holzquellen',
    generateContent_ironSources: 'Eisenquellen',
    generateContent_stoneSources: 'Steinquellen',
    generateContent_coalSources: 'Kohlequellen',
    generateContent_sandSources: 'Sandquellen',
    generateContent_claySources: 'Lehmquellen',
    generateContent_buildings: 'Gebäude/Allgemein',
    generateWorldModal_generate: 'Welt generieren',
    generateContent_title: 'Inhalte mit KI generieren',
    generateContent_addAgents: 'Agenten hinzufügen',
    generateContent_agentsLabel: 'Anzahl zum Hinzufügen',
    generateContent_agentsDescription: 'Neue Agenten generieren und zur bestehenden Welt hinzufügen.',
    generateContent_generateAgentsBtn: 'Agenten generieren',
    generateContent_addEntities: 'Entitäten hinzufügen',
    generateContent_entitiesDescriptionCategorized: 'Neue Entitäten nach Typ sortiert generieren und zur bestehenden Welt hinzufügen.',
    generateContent_generateEntitiesBtn: 'Entitäten generieren',
    psychoanalysis_title: 'Psychoanalyse-Bericht',
    psychoanalysis_generating: 'Analyse wird erstellt... die KI denkt tief nach.',
    report_psychodynamik: 'Psychodynamik',
    report_persoenlichkeitsbild: 'Persönlichkeitsbild',
    report_beziehungsdynamik: 'Beziehungsdynamik',
    report_trauma: 'Traumatische Spuren oder psychische Belastung',
    report_kultur: 'Kulturelle & spirituelle Verarbeitung',
    report_projektionen: 'Projektionen oder Verschiebungen',
    report_empfehlung: 'Therapeutische Empfehlung',
    analytics_title: 'Analyse-Dashboard',
    election_title: 'Wahl',
    election_status_none: 'Keine aktive Wahl',
    election_status_active: 'Aktiv bis {endDate}',
    election_status_inactive: 'Nicht aktiv',

    // services/simulation.ts
    reason_for_imprisonment_unknown: 'Der genaue Grund für die Inhaftierung ist in Vergessenheit geraten, wahrscheinlich im Zusammenhang mit einem kürzlichen Verbrechen.',
    
    // components/AgentCard.tsx
    lifeStage_child: 'Kind',
    lifeStage_adolescent: 'Jugendlicher',
    lifeStage_adult: 'Erwachsenener',
    lifeStage_elder: 'Ältester',
    world_leader: 'Anführer',
    export_journal_button: 'Tagebuch als Markdown exportieren',
    agentCard_tech: 'Technologien',

    // components/ControlPanel.tsx
    controlPanel_generateWorld: 'Neue Welt',
    controlPanel_addWithAI: 'Hinzufügen...',
    controlPanel_step: 'Schritt',
    controlPanel_run: 'Starten',
    controlPanel_reset: 'Zurücksetzen',
    controlPanel_analyze: 'Welt analysieren',
    controlPanel_analyze_tooltip: 'Generiere eine detaillierte Analyse des aktuellen Weltzustands.',

    // components/LogPanel.tsx
    logPanel_eventLog: 'Ereignisprotokoll',

    // components/WorldGraph.tsx
    worldGraph_title: 'Weltkarte & Beziehungen',

    // components/CreateObjectPanel.tsx
    create_invalidJson: 'Ungültiges JSON-Format in den Überzeugungen.',
    create_createNew: 'Neu erstellen...',
    create_agent: 'Agent',
    create_entity: 'Entität',
    create_action: 'Aktion',
    create_name: 'Name',
    create_generate_random_name: 'Zufälligen Namen generieren',
    create_description: 'Beschreibung',
    create_generate_random_description: 'Zufällige Beschreibung generieren',
    create_beliefsPlaceholder: 'Überzeugungen (JSON, z.B. {"key": 0.8})',
    create_generate_random_beliefs: 'Zufällige Überzeugungen generieren',
    create_genome_placeholder: 'Genom (Komma-getrennt, z.B. G-SOCIAL)',
    create_generate_genes_title: 'Zufällige Gene generieren',
    create_role_label: 'Rolle',
    create_randomize_personality: 'Zufällig',
    create_beliefKeyPlaceholder: 'Überzeugungsschlüssel (optional)',
    create_mechanical_effects: 'Mechanische Effekte (Optional)',
    create_costs_placeholder: 'Kosten (JSON, z.B. {"wood": 10})',
    create_stat_changes_label: 'Statusänderungen (+/-)',
    create_skill_gain_label: 'Fähigkeitsgewinn',
    create_skill_to_gain: 'Fähigkeit',
    create_amount: 'Menge',
    create_create: 'Erstellen',

    // components/ExporterPanel.tsx
    stateManagement_title: 'Zustandsverwaltung',
    stateManagement_save: 'Weltzustand speichern',
    stateManagement_load: 'Weltzustand laden',
    export_conversations: 'Gespräche exportieren',
    export_statistics: 'Statistiken exportieren',
    stateManagement_advanced: 'Erweiterter Export',
    export_env: 'Nur Umgebung exportieren',
    export_agents: 'Nur Agenten exportieren',
    export_entities: 'Nur Entitäten exportieren',

    // components/AdminPanel.tsx
    admin_title: 'Admin-Panel',
    admin_politicalManagement: 'Politische Verwaltung',
    admin_currentLeader: 'Aktueller Anführer',
    admin_selectAgent: 'Agent auswählen...',
    admin_setLeader: 'Anführer setzen',
    admin_startElection: 'Neue Wahl starten',
    admin_laws: 'Gesetze',
    admin_lawName: 'Gesetzname',
    admin_violatingAction: 'Verletzende Aktion',
    admin_addLaw: 'Gesetz hinzufügen',
    admin_techManagement: 'Technologieverwaltung',
    admin_researchPoints: 'Forschungspunkte',
    admin_unlock: 'Freischalten',
    admin_agentManagement: 'Agentenverwaltung',
    admin_resurrect: 'Wiederbeleben',
    admin_set: 'Setzen',
    admin_sicknessPlaceholder: 'Krankheitsname (oder leer)',
    admin_imprisonDuration: 'Haftdauer (Schritte)',
    admin_imprison: 'Inhaftieren',
    admin_ruleEditor: 'Weltregel-Editor',

    // hooks/useSimulation.ts
    stats_report_title: 'Statistikbericht',
    stats_marriages: 'Ehen',
    stats_births: 'Geburten',
    stats_imprisonments: 'Inhaftierungen',
    stats_fights: 'Kämpfe',

    // components/AnalyticsDashboard.tsx
    analytics_social_download_desc: 'Eine statische Vorschau ist nicht verfügbar. Laden Sie eine interaktive HTML-Datei herunter, um das vollständige soziale Netzwerkdiagramm zu erkunden, einschließlich Beziehungen, Kulturen und Agentendetails.',
    analytics_social_download_btn: 'Interaktive Karte herunterladen',
    analytics_eco_no_transactions: 'Keine Währungstransaktionen im ausgewählten Zeitfenster erfasst.',
    analytics_time_window: 'Zeitfenster (Schritte)',
    analytics_tech_progress: 'Technologischer Fortschritt nach Kultur',
    analytics_tab_social: 'Sozial',
    analytics_tab_economic: 'Wirtschaft',
    analytics_tab_cultural: 'Kulturell',
    analytics_tab_tech: 'Technologie',

    // components/AnalysisReportModal.tsx
    analysis_title: 'Weltanalysebericht',
    analysis_download: 'Herunterladen',
    analysis_tab_current: 'Aktueller Bericht',
    analysis_tab_history: 'Verlauf',
    analysis_tab_development: 'Entwicklung',
    analysis_no_report: 'Es wurde noch kein Analysebericht erstellt.',
    analysis_report_from: 'Bericht vom',
    analysis_view: 'Ansehen',
    analysis_no_history: 'Keine historischen Berichte verfügbar.',
    analysis_dev_totalAgents: 'Gesamt-Agenten',
    analysis_dev_avgWealth: 'Durchschnittl. Wohlstand',
    analysis_dev_friendships: 'Durchschnittl. Freundschaften',
    analysis_dev_notEnoughData: 'Nicht genügend historische Daten zur Anzeige des Entwicklungsdiagramms.',
    analysis_generating: 'Weltanalyse wird erstellt...',
    
     // UI Labels
    agentCard_statusAndNeeds: 'Status & Bedürfnisse',
    agentCard_healthy: 'Gesund',
    agentCard_deceased: 'Verstorben',
    agentCard_imprisoned: 'Inhaftiert',
    agentCard_release_at: 'Entlassung in Schritt',
    agentCard_age: 'Alter',
    agentCard_culture: 'Kultur',
    agentCard_religion: 'Religion',
    agentCard_role: 'Rolle',
    agentCard_health: 'Gesundheit',
    agentCard_hunger: 'Hunger',
    agentCard_thirst: 'Durst',
    agentCard_fatigue: 'Müdigkeit',
    agentCard_stress: 'Stress',
    agentCard_socialStatus: 'Sozialstatus',
    agentCard_sickness: 'Krankheit',
    agentCard_currency: 'Währung',
    personality_title: 'Persönlichkeit',
    psyche_title: 'Psyche & Triebe',
    psychoanalysis_generate_button: 'Psychoanalyse erstellen',
    agentCard_interact: 'Interagieren',
    agentCard_promptPlaceholder: 'Gib einen Befehl an {name}...',
    agentCard_promptPlaceholderRaw: 'Gib einen exakten Aktionsnamen ein...',
    agentCard_promptPlaceholderDeceased: 'Dieser Agent ist verstorben.',
    agentCard_useAi: 'KI zur Interpretation nutzen',
    agentCard_beliefs: 'Überzeugungen',
    agentCard_emotions: 'Emotionen',
    agentCard_skills: 'Fähigkeiten',
    agentCard_goals: 'Ziele',
    agentCard_trauma: 'Trauma',
    agentCard_relationships: 'Beziehungen',
    agentCard_inventory: 'Inventar',
    agentCard_family: 'Familie',
    agentCard_child_relation: 'Kind',
    agentCard_no_children: 'Keine Kinder.',
    agentCard_property: 'Eigentum',
    agentCard_genome: 'Genom',
    agentCard_noBeliefs: 'Keine definierten Überzeugungen.',
    agentCard_noEmotions: 'Aktuell keine starken Emotionen.',
    agentCard_noGoals: 'Keine aktiven Ziele.',
    agentCard_noTrauma: 'Keine Traumata verzeichnet.',
    agentCard_noRelationships: 'Keine etablierten Beziehungen.',
    agentCard_noInventory: 'Inventar ist leer.',
    agentCard_noProperty: 'Besitzt kein Eigentum.',
    agentCard_noGenome: 'Keine signifikanten genetischen Marker.',
    agentCard_jailJournal: 'Gefängnistagebuch',

    // Entity Card
    entityCard_title: "Entitätsdetails",
    entityCard_owner: "Besitzer",
    entityCard_unowned: "Ohne Besitzer",
    entityCard_position: "Position",
    entityCard_resourceDetails: "Ressourcendetails",
    entityCard_resourceType: "Typ",
    entityCard_quantity: "Menge",
    entityCard_jailDetails: "Gefängnisdetails",
    entityCard_inmates: "Insassen",
    entityCard_noInmates: "Derzeit keine Insassen.",
    entityCard_marketDetails: "Marktplatzdetails",
    entityCard_listings: "Aktuelle Angebote",
    entityCard_noListings: "Keine Artikel zum Verkauf angeboten.",
    entityCard_factoryDetails: "Fabrikdetails",
    entityCard_product: "Produkt",
    entityCard_employees: "Mitarbeiter",
    entityCard_noEmployees: "Keine Mitarbeiter.",

    // Roles
    role_worker: 'Arbeiter',
    role_healer: 'Heiler',
    role_scientist: 'Wissenschaftler',
    role_leader: 'Anführer',
    role_trader: 'Händler',
    role_crafter: 'Handwerker',
    role_guard: 'Wache',
    role_counselor: 'Berater',
    role_entrepreneur: 'Unternehmer',

    // Items
    item_advanced_medicine: 'Fortschrittl. Medizin',
    item_ancient_artifacts: 'Antike Artefakte',
    item_bandages: 'Verbände',
    item_bricks: 'Ziegel',
    item_charcoal: 'Holzkohle',
    item_clay: 'Lehm',
    item_coal: 'Kohle',
    item_food: 'Nahrung',
    item_furniture: 'Möbel',
    item_glass: 'Glas',
    item_herbs: 'Kräuter',
    item_iron: 'Eisen',
    item_iron_ingot: 'Eisenbarren',
    item_medicine: 'Medizin',
    item_plow: 'Pflug',
    item_pottery: 'Töpferwaren',
    item_research_notes: 'Forschungsnotizen',
    item_sand: 'Sand',
    item_steel_ingot: 'Stahlbarren',
    item_stone: 'Stein',
    item_sword: 'Schwert',
    item_tools: 'Werkzeuge',
    item_water: 'Wasser',
    item_wood: 'Holz',

    // Relationships
    relationship_stranger: 'Fremder',
    relationship_acquaintance: 'Bekannter',
    relationship_friend: 'Freund',
    relationship_rival: 'Rivale',
    relationship_partner: 'Partner',
    relationship_spouse: 'Ehepartner',
    'relationship_ex-partner': 'Ex-Partner',

    // Goals
    goal_becomeLeader: 'Anführer werden',
    goal_buildLargeHouse: 'Ein großes Haus bauen',
    goal_masterSkill: 'Eine Fähigkeit meistern',
    goal_avengeRival: 'Sich am Rivalen rächen',
    goal_achieveWealth: 'Wohlstand erreichen',
    goal_mentorYoungAgent: 'Einen jungen Agenten anleiten',
    goal_seekCounseling: 'Beratung suchen',
    goal_findMeaning: 'Den Sinn des Lebens finden',
    goal_forgiveRival: 'Einem Rivalen vergeben',
    goal_expressGrief: 'Trauer ausdrücken',

    // Genes & Descriptions
    'gene_G-RESISTANT': 'Resistent',
    'gene_desc_G-RESISTANT': 'Höhere Resistenz gegen Krankheiten.',
    'gene_G-AGILE': 'Agil',
    'gene_desc_G-AGILE': 'Bewegt sich schneller auf der Karte.',
    'gene_G-SOCIAL': 'Sozial',
    'gene_desc_G-SOCIAL': 'Baut leichter Beziehungen auf.',
    'gene_G-LONGEVITY': 'Langlebigkeit',
    'gene_desc_G-LONGEVITY': 'Langsamerer Gesundheitsverlust im Alter.',
    'gene_G-FASTHEAL': 'Schnelle Heilung',
    'gene_desc_G-FASTHEAL': 'Erholt mehr Gesundheit beim Ausruhen.',
    'gene_G-INTELLIGENT': 'Intelligent',
    'gene_desc_G-INTELLIGENT': 'Lernt schneller Fähigkeiten und trägt mehr zur Forschung bei.',
    'gene_G-FERTILE': 'Fruchtbar',
    'gene_desc_G-FERTILE': 'Höhere Chance auf erfolgreiche Fortpflanzung.',

    // Chart Keys - Personality
    personality_openness: 'Offenheit',
    personality_conscientiousness: 'Gewissenhaftigkeit',
    personality_extraversion: 'Extraversion',
    personality_agreeableness: 'Verträglichkeit',
    personality_neuroticism: 'Neurotizismus',

    // Chart Keys - Psyche
    psyche_empathy: 'Empathie',
    psyche_vengefulness: 'Rachsucht',
    psyche_forgiveness: 'Vergebung',
    psyche_searchForMeaning: 'Sinnsuche',
    psyche_decisionPressure: 'Entscheidungsdruck',
    psyche_fearOfDeath: 'Todesangst',
    psyche_boredom: 'Langeweile',
    psyche_inspiration: 'Inspiration',
    psyche_fanaticism: 'Fanatismus',
    psyche_spiritualNeed: 'Spirit. Bedürfnis',
    psyche_jealousy: 'Eifersucht',

    // Chart Keys - Beliefs
    belief_admin_access: 'Admin-Zugriff',
    belief_aggression: 'Aggression',
    belief_community_first: 'Gemeinschaft zuerst',
    belief_immorality_ok: 'Unmoral ist in Ordnung',
    belief_knowledge_is_freedom: 'Wissen ist Freiheit',
    belief_knowledge_is_sacred: 'Wissen ist heilig',
    belief_law_is_absolute: 'Das Gesetz ist absolut',
    belief_nature_good: 'Natur ist heilig',
    belief_past_informs_future: 'Vergangenheit prägt Zukunft',
    belief_planning_ahead_good: 'Planung ist gut',
    belief_progress_good: 'Fortschritt ist gut',
    belief_social_interaction_good: 'Sozialkontakte sind gut',
    belief_tradition_important: 'Tradition ist wichtig',
    belief_wealth_is_power: 'Reichtum ist Macht',
    belief_weather_rainy: 'Regenwetter ist trist',
    belief_weather_sunny: 'Sonniges Wetter ist schön',

    // Chart Keys - Emotions
    emotion_anger: 'Wut',
    emotion_fear: 'Angst',
    emotion_grief: 'Trauer',
    emotion_happiness: 'Freude',
    emotion_love: 'Liebe',
    emotion_pride: 'Stolz',
    emotion_sadness: 'Traurigkeit',
    emotion_shame: 'Scham',
    emotion_trust: 'Vertrauen',

    // Chart Keys - Skills
    skill_combat: 'Kampf',
    skill_construction: 'Bauen',
    skill_crafting: 'Handwerk',
    skill_farming: 'Landwirtschaft',
    skill_healing: 'Heilung',
    skill_mining: 'Bergbau',
    skill_rhetoric: 'Rhetorik',
    skill_trading: 'Handel',
    skill_woodcutting: 'Holzfällen',

    // Admin Panel
    stat_currency: 'Währung',
    stat_fatigue: 'Müdigkeit',
    stat_health: 'Gesundheit',
    stat_hunger: 'Hunger',
    stat_stress: 'Stress',
    stat_thirst: 'Durst',
    
    // Tech
    tech_advanced_construction: 'Fortschrittl. Bauwesen',
    tech_agriculture: 'Landwirtschaft',
    tech_bioengineering: 'Bio-Ingenieurwesen',
    tech_chemistry: 'Chemie',
    tech_governance: 'Regierungsführung',
    tech_manufacturing: 'Manufaktur',
    tech_metallurgy: 'Metallurgie',
    tech_writing: 'Schrift',

    // Actions
    action_Move_North: "Nach Norden bewegen",
    action_desc_Move_North: "Einen Schritt nach Norden bewegen.",
    action_Move_South: "Nach Süden bewegen",
    action_desc_Move_South: "Einen Schritt nach Süden bewegen.",
    action_Move_East: "Nach Osten bewegen",
    action_desc_Move_East: "Einen Schritt nach Osten bewegen.",
    action_Move_West: "Nach Westen bewegen",
    action_desc_Move_West: "Einen Schritt nach Westen bewegen.",
    action_Eat_Food: "Nahrung essen",
    action_desc_Eat_Food: "Iss Nahrung aus dem Inventar, um den Hunger zu reduzieren.",
    action_Drink_Water: "Wasser trinken",
    action_desc_Drink_Water: "Finde eine Wasserquelle und trinke, um den Durst zu stillen.",
    action_Gather_Food: "Nahrung sammeln",
    action_desc_Gather_Food: "Sammle Nahrung von einer nahen Quelle.",
    action_Gather_Wood: "Holz sammeln",
    action_desc_Gather_Wood: "Sammle Holz aus einem nahen Wald.",
    action_Build_Shelter: "Unterkunft bauen",
    action_desc_Build_Shelter: "Baue eine kleine Unterkunft mit 10 Holz.",
    action_Rest: "Ausruhen",
    action_desc_Rest: "Ruhe dich aus, um Müdigkeit und Gesundheit wiederherzustellen.",
    action_Work_for_money: "Für Geld arbeiten",
    action_desc_Work_for_money: "Verrichte einen Tag lang allgemeine Arbeit, um eine kleine Menge Währung zu verdienen.",
    action_Found_Company: "Firma gründen",
    action_desc_Found_Company: "Kaufe eine unbesessene ressourcenproduzierende Entität, um Unternehmer zu werden.",
    action_Work_for_Company: "Für Firma arbeiten",
    action_desc_Work_for_Company: "Arbeite in einer privaten Firma, um Lohn vom Besitzer zu erhalten.",
    action_Mine_Iron: "Eisen abbauen",
    action_desc_Mine_Iron: "Baue Eisen aus einer nahen Erzader ab.",
    action_Craft_Advanced_Medicine: "Fortschr. Medizin herstellen",
    action_desc_Craft_Advanced_Medicine: "Stellt fortschrittliche Medizin aus Zutaten her.",
    action_Craft_Charcoal: "Holzkohle herstellen",
    action_desc_Craft_Charcoal: "Stellt Holzkohle aus Zutaten her.",
    action_Smelt_Steel_Ingot: "Stahlbarren schmelzen",
    action_desc_Smelt_Steel_Ingot: "Stellt Stahlbarren aus Zutaten her.",
    action_Craft_Sword: "Schwert schmieden",
    action_desc_Craft_Sword: "Stellt ein Schwert aus Zutaten her.",
    action_Craft_Plow: "Pflug herstellen",
    action_desc_Craft_Plow: "Stellt einen Pflug aus Zutaten her.",
    action_Craft_Bricks: "Ziegel herstellen",
    action_desc_Craft_Bricks: "Stellt Ziegel aus Zutaten her.",
    action_Craft_Glass: "Glas herstellen",
    action_desc_Craft_Glass: "Stellt Glas aus Zutaten her.",
    action_Craft_Tools: "Werkzeuge herstellen",
    action_desc_Craft_Tools: "Stellt Werkzeuge aus Zutaten her.",
    action_Craft_Furniture: "Möbel herstellen",
    action_desc_Craft_Furniture: "Stellt Möbel aus Zutaten her.",
    action_Craft_Pottery: "Töpferwaren herstellen",
    action_desc_Craft_Pottery: "Stellt Töpferwaren aus Zutaten her.",
    action_List_Item_on_Market: "Gegenstand auf Markt anbieten",
    action_desc_List_Item_on_Market: "Biete einen Gegenstand aus dem Inventar auf dem öffentlichen Markt an.",
    action_Buy_from_Market: "Vom Markt kaufen",
    action_desc_Buy_from_Market: "Kaufe einen auf dem Markt angebotenen Gegenstand.",
    action_Vote: "Wählen",
    action_desc_Vote: "Stimme für einen Kandidaten in der aktuellen Wahl ab.",
    action_Run_for_Election: "Für Wahl kandidieren",
    action_desc_Run_for_Election: "Kandidatur in der aktuellen Wahl bekannt geben.",
    action_Propose_New_Law: "Neues Gesetz vorschlagen",
    action_desc_Propose_New_Law: "Schlage als Anführer ein neues Gesetz vor, über das die Gemeinschaft abstimmt.",
    action_Found_Religion: "Religion gründen",
    action_desc_Found_Religion: "Versuche, eine neue Religion für deine Kultur zu gründen.",
    action_Research: "Forschen",
    action_desc_Research: "Trage zur kulturellen Forschung bei.",
    action_Invent_Technology: "Technologie erfinden",
    action_desc_Invent_Technology: "Versuche, eine neue Technologie basierend auf aktuellem Wissen zu erfinden.",
    action_Share_Knowledge: "Wissen teilen",
    action_desc_Share_Knowledge: "Arbeite mit einem anderen Wissenschaftler zusammen, um die Forschung zu beschleunigen.",
    action_Leave_Culture: "Kultur verlassen",
    action_desc_Leave_Culture: "Verlasse deine aktuelle Kultur, um ungebunden zu sein.",
    action_Found_Culture: "Kultur gründen",
    action_desc_Found_Culture: "Gründe eine neue Kultur basierend auf deinen eigenen Überzeugungen. Erfordert Sozialstatus > 40 und Kulturlosigkeit.",
    action_Recruit_for_Culture: "Für Kultur anwerben",
    action_desc_Recruit_for_Culture: "Versuche, einen nahen Agenten zu überzeugen, deiner Kultur beizutreten.",
    action_Propose_Marriage: "Heiratsantrag machen",
    action_desc_Propose_Marriage: "Mache einem geeigneten nahen Agenten einen Heiratsantrag.",
    action_Accept_Proposal: "Antrag annehmen",
    action_desc_Accept_Proposal: "Einen Heiratsantrag annehmen.",
    action_Reproduce: "Fortpflanzen",
    action_desc_Reproduce: "Versuche, mit einem Ehepartner ein Kind zu bekommen.",
    action_Artificial_Insemination: "Künstliche Befruchtung",
    action_desc_Artificial_Insemination: "Nutze fortschrittliche Technologie, um ein Kind zu zeugen. Erfordert Bio-Ingenieurwesen. Kosten: 500 Währung.",
    action_Mentor_young_agent: "Jungen Agenten anleiten",
    action_desc_Mentor_young_agent: "Bringe einem jüngeren Agenten eine Fähigkeit bei.",
    action_Seek_Counseling: "Beratung suchen",
    action_desc_Seek_Counseling: "Suche Hilfe bei einem Berater, um Stress abzubauen.",
    action_Provide_Counseling: "Beratung anbieten",
    action_desc_Provide_Counseling: "Hilf als Berater einem Agenten, Stress abzubauen.",
    action_Talk: "Reden",
    action_desc_Talk: "Sprich mit einem nahen Agenten oder bewege dich auf ihn zu, um zu reden.",
    action_Fight: "Kämpfen",
    action_desc_Fight: "Kämpfe mit einem nahen Agenten.",
    action_Steal: "Stehlen",
    action_desc_Steal: "Versuche, von einem nahen Agenten zu stehlen.",
    action_Patrol: "Patrouillieren",
    action_desc_Patrol: "Patrouilliere als Wache das Gebiet.",
    action_Meditate: "Meditieren",
    action_desc_Meditate: "Meditiere, um Frieden und Inspiration zu finden.",
    action_Mourn: "Trauern",
    action_desc_Mourn: "Nimm dir Zeit, um Trauer zu verarbeiten.",
    action_Offer_Forgiveness: "Vergebung anbieten",
    action_desc_Offer_Forgiveness: "Biete einem Rivalen Vergebung an, um die Rivalität möglicherweise zu beenden.",
    action_Confront_Partner: "Partner konfrontieren",
    action_desc_Confront_Partner: "Konfrontiere deinen Ehepartner/Partner aufgrund von Eifersucht.",

    // Logs
    log_simulationInitialized: 'Simulation initialisiert.',
    log_simulationStepped: 'Simulation einen Schritt weiter.',
    log_simulationRanSteps: 'Simulation lief für {steps} Schritte.',
    log_simulationReset: 'Simulation auf Anfangszustand zurückgesetzt.',
    log_agentProcessingPrompt: 'Agent {agentId} verarbeitet Befehl: "{prompt}" (mit {aiInfo})',
    log_aiSuggestedAction: 'KI schlug Aktion vor: "{action}"',
    log_aiFailed: 'KI konnte keine passende Aktion finden. Keine Aktion ausgeführt.',
    log_aiError: 'Fehler bei der KI-API: {error}',
    error_lmStudio_cors: 'Verbindung zu LM Studio fehlgeschlagen. Dies ist normalerweise ein Cross-Origin Resource Sharing (CORS) Problem. Bitte prüfen Sie Folgendes in Ihrer LM Studio-Anwendung: 1. Gehen Sie zum Tab "Local Server". 2. Stellen Sie sicher, dass der Server "Running" ist. 3. **Ganz wichtig: Suchen Sie die "CORS"-Option und stellen Sie sicher, dass sie aktiviert ist.** 4. Überprüfen Sie, ob die URL in den Einstellungen dieser App mit der in LM Studio angezeigten übereinstimmt.',
    error_lmStudio_url_invalid: "Ungültiges LM Studio URL-Format. Bitte geben Sie eine gültige Basis-URL wie 'http://localhost:1234' an.",
    error_gemini_no_key: 'Google Gemini API-Schlüssel wurde nicht in den Umgebungsvariablen gefunden. Bitte stellen Sie sicher, dass er gesetzt ist.',
    log_createdAgent: 'Neuen Agenten erstellt: {name}',
    log_createdEntity: 'Neue Entität erstellt: {name}',
    log_createdAction: 'Neue Aktion erstellt: {name}',
    log_removed: '{type} entfernt: {name}',
    log_adminSetHealth: "Admin hat die Gesundheit von {name} auf {health} gesetzt.",
    log_adminSetPosition: "Admin hat die Position von {name} auf ({x}, {y}) gesetzt.",
    log_adminInflictedSickness: "Admin hat {name} mit {sickness} infiziert.",
    log_adminCured: 'Admin hat {name} geheilt.',
    log_adminResurrected: 'Admin hat {name} wiederbelebt.',
    log_adminModifiedEnv: 'Admin hat die Umgebung direkt modifiziert.',
    log_exported: 'Teildaten exportiert: {type}.',
    log_stateSaved: 'Simulationszustand in Datei gespeichert.',
    log_stateLoaded: 'Simulationszustand erfolgreich aus Datei geladen.',
    log_loadError: 'Fehler beim Laden des Zustands aus der Datei: {error}',
    log_runningSimulation: 'Führe Simulation für {steps} Schritte aus...',
    log_generating: 'Generiere...',
    log_generatingWorld: 'Generiere Welt...',
    log_worldGenerated: 'Neue Welt erfolgreich verarbeitet.',
    log_worldGenerated_warning: '⚠️ KI hat {genAgents}/{reqAgents} Agenten und {genEntities}/{reqEntities} Entitäten generiert. Fahre mit generierten Ergebnissen fort.',
    log_generatingAgents: 'Generiere {count} neue Agenten...',
    log_generatingEntities: 'Generiere {count} neue Entitäten...',
    log_addedAgents: '{count} neue Agenten zur Welt hinzugefügt.',
    log_addedEntities: '{count} neue Entitäten zur Welt hinzugefügt.',
    log_configure_ai_full: 'KI-Anbieter nicht konfiguriert. Bitte öffnen Sie die Einstellungen, um einen KI-Anbieter auszuwählen und zu konfigurieren.',
    log_adminSetCurrency: "Admin hat die Währung von {name} auf {currency}$ gesetzt.",
    log_adminRepealedLaw: "Admin hat das Gesetz aufgehoben: {lawName}.",
    log_adminSetLeader: "Admin hat {name} zum neuen Anführer ernannt.",
    log_adminUnlockedTech: "Admin hat die Technologie \"{techId}\" für {cultureName} freigeschaltet.",
    log_adminImprisoned: "Admin hat {name} für {duration} Schritte inhaftiert.",
    log_psychoanalysis_applied: '🧬 Psychoanalyse-Ergebnisse wurden in die Psyche von {agentName} integriert.',
    log_grief: '💔 {agentName} ist von Trauer über den Tod von {deceasedName} erfüllt.',
    log_sickness_spread: '☣️ {infectedName} hat sich bei {sourceName} mit {sickness} angesteckt!',
    log_cognitive_dissonance: '🤔 {agentName} verspürt Stress, da die Handlung gegen die eigenen Überzeugungen verstößt.',
    log_action_custom_success: '{agentName} hat die benutzerdefinierte Aktion erfolgreich ausgeführt: "{actionName}".',
    log_action_custom_fail_cost: '{agentName} versuchte "{actionName}" auszuführen, aber es fehlten {amount} {item}.',
    'log_action_leave_culture_success': '{agentName} hat seine Kultur verlassen und ist nun kulturlos.',
    'log_action_leave_culture_fail': '{agentName} kann eine Kultur nicht verlassen, der er nicht angehört.',
    'log_action_found_culture_success': '🏛️ Eine neue Bewegung beginnt! {agentName} hat die Kultur gegründet: {cultureName}.',
    'log_action_found_culture_fail_member': '{agentName} kann keine neue Kultur gründen, solange er bereits Teil einer ist.',
    'log_action_found_culture_fail_status': '{agentName} fehlt der soziale Einfluss (Status > 40), um eine neue Kultur zu gründen.',
    'log_action_recruit_culture_success': '🤝 {recruiterName} hat {targetName} erfolgreich überzeugt, der {cultureName}-Kultur beizutreten!',
    'log_action_recruit_culture_fail': '{recruiterName} versuchte, {targetName} zu rekrutieren, war aber nicht überzeugend.',
    'log_action_recruit_culture_no_target': '{agentName} suchte jemanden zum Rekrutieren, fand aber niemanden Geeigneten in der Nähe.',
    'log_action_recruit_culture_no_culture': '{agentName} kann nicht für eine Kultur rekrutieren, der er nicht angehört.',
    log_action_propose_law_approved: "Die {cultureName}-Kultur hat dem neuen Gesetz '{lawName}' zugestimmt. Es ist nun in Kraft.",
    log_action_propose_law_rejected: "Die {cultureName}-Kultur hat das vorgeschlagene Gesetz '{lawName}' abgelehnt.",
    log_action_propose_law_fail_ai: "{agentName} versuchte, ein neues Gesetz zu entwerfen, konnte aber keinen guten Vorschlag machen.",
    log_action_propose_law_not_leader: "{agentName} versuchte, ein Gesetz vorzuschlagen, ist aber nicht der Anführer.",
    // Action Logs
    log_action_eat: '🍎 {agentName} isst etwas Nahrung und reduziert seinen Hunger.',
    log_action_eat_no_food: '{agentName} möchte essen, hat aber keine Nahrung im Inventar.',
    log_action_drink: '💧 {agentName} trinkt aus {sourceName} und löscht seinen Durst.',
    log_action_drink_no_source: '{agentName} ist durstig, findet aber keine Wasserquelle in der Nähe.',
    log_action_gather_food: '🧺 {agentName} sammelt {amount} Nahrung von {sourceName}.',
    log_action_gather_food_no_source: '{agentName} sucht nach Nahrung, findet aber keine Quellen in der Nähe.',
    log_action_gather_fail_private: '{agentName} versucht, von {resourceName} zu sammeln, aber es ist in Privatbesitz.',
    log_action_gather_wood: '🪵 {agentName} sammelt {amount} Holz von {sourceName}.',
    log_action_gather_wood_no_source: '{agentName} sucht nach Holz, findet aber keine Quellen in der Nähe.',
    log_action_build_shelter: '🏡 {agentName} benutzt 10 Holz, um einen kleinen Unterschlupf zu bauen.',
    log_action_build_shelter_no_wood: '{agentName} möchte einen Unterschlupf bauen, benötigt aber {woodCost} Holz.',
    log_action_move_towards_resource: '{agentName} bewegt sich in Richtung {resourceName}.',
    log_action_move_towards_agent: '{agentName} bewegt sich in Richtung {targetName}.',
    log_action_move: '{agentName} bewegt sich nach {direction} zu ({x}, {y}).',
    log_action_custom: 'Benutzerdefinierte Aktion "{actionName}" von {agentName} ausgeführt.',
    log_action_fight: '💥 {agentName1} und {agentName2} haben einen Kampf angefangen!',
    log_action_steal_success: '✋ {stealer} hat 1 {item} von {victim} gestohlen!',
    log_action_steal_fail: ' hat einen Diebstahlversuch bei {victim} vermasselt und wurde erwischt!',
    log_action_steal_no_target: '{agentName} suchte nach jemandem zum Bestehlen, fand aber keine geeigneten Ziele.',
    log_action_rest: '💤 {agentName} ruht sich aus und stellt seine Gesundheit auf {newHealth} wieder her.',
    log_action_rest_and_cured: '💤 {agentName} ruht sich aus, erholt sich und spürt, wie seine {sickness} nachlässt!',
    log_action_talk: '💬 {speakerName} sagt zu {listenerName}: "{dialogue}"',
    log_action_talk_no_one_near: '{agentName} wollte reden, aber niemand war in der Nähe.',
    log_action_talk_failed: '{agentName} versuchte, ein Gespräch zu beginnen, verlor sich aber in Gedanken.',
    log_survival_starving: '‼️ {agentName} hungert und verliert Gesundheit!',
    log_survival_dehydrated: '‼️ {agentName} ist dehydriert und verliert Gesundheit!',
    log_survival_sickness: '🤢 {agentName} leidet an {sickness} und verliert Gesundheit.',
    log_survival_succumbed_needs: '💀 {agentName} ist Hunger oder Durst erlegen.',
    log_execution_deceased: '{agentName} kann keine Aktionen ausführen, da er verstorben ist.',
    log_execution_actionNotFound: '{agentName} konnte keine passende Aktion für den Befehl finden: "{prompt}"',
    log_execution_imprisoned: '{agentName} kann keine Aktionen ausführen, während er inhaftiert ist.',
    log_action_fail_role: '{agentName} kann diese Aktion nicht ausführen, erfordert Rolle: {requiredRole}.',
    log_action_work_for_money: '💰 {agentName} arbeitet einen Tag und verdient {amount}$.',
    log_action_found_company_success: '🏢 {agentName} hat ein Unternehmen gegründet, indem er das Grundstück "{resourceName}" für {cost}$ gekauft hat und wurde zum Unternehmer!',
    log_action_found_company_fail_funds: '{agentName} möchte ein Unternehmen gründen, kann sich aber den Preis von {cost}$ nicht leisten.',
    log_action_found_company_fail_none: '{agentName} suchte nach einem Grundstück zum Kauf, um ein Unternehmen zu gründen, aber es war keines verfügbar.',
    log_action_work_for_company_success: '💼 {agentName} hat bei {resourceName} für {ownerName} gearbeitet und {wage}$ verdient!',
    log_action_work_for_company_fail_none: '{agentName} suchte nach Arbeit, aber keine Unternehmen in der Nähe stellten ein.',
    log_action_work_for_company_fail_no_owner: '{agentName} versuchte zu arbeiten, aber der Eigentümer konnte nicht gefunden werden.',
    log_action_work_for_company_fail_owner_broke: '{agentName} wollte für {ownerName} arbeiten, aber dieser konnte sich den Lohn nicht leisten.',
    log_action_work_for_company_fail_no_resources: '{agentName} versuchte bei {resourceName} zu arbeiten, aber es war erschöpft.',
    log_action_mine_iron: '⛏️ {agentName} baut {amount} Eisen von {sourceName} ab.',
    log_action_mine_iron_no_source: '{agentName} sucht nach Eisen, findet aber keine Quellen in der Nähe.',
    log_action_craft_success: '🛠️ {agentName} hat erfolgreich einen {itemName} hergestellt.',
    log_action_craft_fail_ingredients: '{agentName} versuchte, einen {itemName} herzustellen, aber es fehlten die Zutaten.',
    log_action_craft_fail_skill: '{agentName} fehlt die Fähigkeit ({skill} {level}) zum Herstellen.',
    log_action_craft_fail_tech: '{agentName} fehlt die Technologie ({tech}) zum Herstellen.',
    log_action_market_list_item: '📈 {agentName} hat 1 {item} auf dem Markt zum Systempreis von {price}$ angeboten.',
    log_action_market_buy_item: '🛒 {agentName} hat 1 {item} von {sellerName} für {price}$ gekauft.',
    log_action_market_too_far: '{agentName} ist zu weit vom Marktplatz entfernt, um zu handeln.',
    log_action_market_no_items: '{agentName} ging zum Markt, hat aber nichts zu verkaufen.',
    log_action_market_is_empty: '{agentName} besuchte den Markt, aber er war leer.',
    log_action_market_cannot_afford: '{agentName} konnte sich keine Gegenstände auf dem Markt leisten.',
    log_law_violation: '⚖️ {agentName} hat das Gesetz "{lawName}" verletzt und wurde mit {punishment}$ bestraft.',
    log_law_violation_arrest: '⚖️ Wache {guardName} hat beobachtet, wie {criminalName} das Gesetz gebrochen hat und hat ihn verhaftet!',
    log_law_violation_arrest_witnessed: "🛡️ Wache {guardName} hat beobachtet, wie {criminalName} gekämpft hat und hat ihn verhaftet!",
    log_guard_warning: "🛡️ Wache {guardName} hat {criminalName} ermahnt, mit dem {crime} aufzuhören.",
    log_action_arrest_success: '⛓️ {guardName} hat {criminalName} verhaftet und ins Gefängnis gebracht.',
    log_action_release_from_jail: '{agentName} hat seine Zeit abgesessen und wird aus dem Gefängnis entlassen.',
    log_action_patrol: '🛡️ Wache {agentName} patrouilliert das Gebiet.',
    log_election_started: '🗳️ Eine Wahl für einen neuen Anführer hat begonnen!',
    log_election_winner: '🏆 {winnerName} hat die Wahl mit {votes} Stimmen gewonnen und ist der neue Anführer!',
    log_election_no_winner: 'Die Wahl endete ohne Gewinner. {oldLeaderName} bleibt an der Macht.',
    log_action_vote_cast: '{agentName} hat für {candidateName} gestimmt.',
    log_action_vote_no_election: '{agentName} möchte wählen, aber es gibt keine aktive Wahl.',
    log_action_vote_no_candidates: '{agentName} möchte wählen, aber es gibt keine Kandidaten.',
    log_action_vote_undecided: '{agentName} konnte sich nicht entscheiden, für wen er stimmen soll.',
    log_action_run_for_election_success: '{agentName} hat seine Kandidatur für den Anführer angekündigt!',
    log_action_run_for_election_no_election: '{agentName} möchte kandidieren, aber es gibt keine aktive Wahl.',
    log_action_run_for_election_already_running: '{agentName} kandidiert bereits für den Anführer.',
    log_action_run_for_election_low_status: '{agentName} fehlt der soziale Status, um für den Anführer zu kandidieren.',
    log_action_enact_law_success: '📜 Anführer {agentName} hat ein neues Gesetz erlassen: "{lawName}".',
    log_action_enact_law_not_leader: '{agentName} versuchte, ein Gesetz zu erlassen, ist aber nicht der Anführer.',
    log_action_enact_law_exists: 'Anführer {agentName} versuchte, das Gesetz "{lawName}" zu erlassen, aber es existiert bereits.',
    log_tech_unlocked: '💡 Die {cultureName}-Kultur hat {techName} entdeckt!',
    log_leader_unlocks_governance: '👑 Als {leaderName} Anführer wird, gewinnt seine Kultur, {cultureName}, Einblicke in die Regierungsführung!',
    log_action_research: '🔬 Wissenschaftler {agentName} trägt {points} Punkte zur Forschung seiner Kultur bei.',
    log_action_research_no_culture: '{agentName} kann ohne Kultur nicht forschen.',
    log_action_share_knowledge: '🤝 {agentName1} und {agentName2} tauschen Erkenntnisse aus und fördern die Forschung.',
    log_action_share_knowledge_no_one: '{agentName} suchte nach einem anderen Wissenschaftler zur Zusammenarbeit, fand aber keinen.',
    log_action_wander_thoughtfully: '{agentName} wandert nachdenklich umher.',
    log_goal_generated: '💡 {agentName} hat ein neues Ziel: {goalDescription}',
    log_promotion: '🎉 {agentName} wurde zu einer neuen Rolle befördert: {newRole}!',
    log_action_propose_marriage_success: '💍 {agentName} macht {targetName} einen Heiratsantrag!',
    log_action_propose_marriage_fail: '{targetName} ist nicht an {agentName}s Antrag interessiert.',
    log_action_propose_no_one_suitable: '{agentName} möchte einen Antrag machen, findet aber niemanden Geeigneten in der Nähe.',
    log_action_propose_fail_already_married: '{agentName} versuchte, einen Antrag zu machen, ist aber bereits verheiratet.',
    log_action_accept_proposal_success: '💒 {agentName} nimmt den Antrag von {targetName} an! Sie sind jetzt verheiratet.',
    log_action_accept_proposal_none: '{agentName} hat keine offenen Anträge, die er annehmen könnte.',
    log_action_reproduce_success: '❤️ Herzlichen Glückwunsch! {agentName} und {partnerName} bekommen ein Kind!',
    log_action_reproduce_fail: '{agentName} und {partnerName} versuchten, ein Kind zu bekommen, aber es war nicht der richtige Zeitpunkt.',
    log_action_reproduce_fail_age: '{agentName} (oder Partner {partnerName}) ist nicht im richtigen Alter, um Kinder zu bekommen.',
    log_action_reproduce_fail_max_offspring: '{agentName} und {partnerName} haben bereits die maximale Anzahl an Kindern erreicht.',
    log_action_reproduce_no_partner: '{agentName} wünscht sich ein Kind, hat aber keinen Partner oder ist nicht in seiner Nähe.',
    log_action_insemination_success: '🔬 Die Wissenschaft siegt! {agentName} hat erfolgreich ein Kind durch künstliche Befruchtung empfangen.',
    log_action_insemination_fail: '🔬 Das künstliche Befruchtungsverfahren für {agentName} ist fehlgeschlagen.',
  },
};

export type TranslationKey = keyof typeof translations.en;